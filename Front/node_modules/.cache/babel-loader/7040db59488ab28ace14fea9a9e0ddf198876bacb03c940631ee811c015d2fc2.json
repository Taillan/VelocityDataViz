{"ast":null,"code":"'use strict';\n\nconst CommandParameter = require('../../command-parameter');\nconst Errors = require('../../misc/errors');\nconst ExecuteStream = require('../execute-stream');\n\n/**\n * Prepare result\n * see https://mariadb.com/kb/en/com_stmt_prepare/#com_stmt_prepare_ok\n */\nclass PrepareResultPacket {\n  #conn;\n  constructor(statementId, parameterCount, columns, database, sql, placeHolderIndex, conn) {\n    this.id = statementId;\n    this.parameterCount = parameterCount;\n    this.columns = columns;\n    this.database = database;\n    this.query = sql;\n    this.closed = false;\n    this._placeHolderIndex = placeHolderIndex;\n    this.#conn = conn;\n  }\n  get conn() {\n    return this.#conn;\n  }\n  execute(values, opts, cb, stack) {\n    let _opts = opts,\n      _cb = cb;\n    if (typeof _opts === 'function') {\n      _cb = _opts;\n      _opts = undefined;\n    }\n    if (this.isClose()) {\n      const error = Errors.createError(`Execute fails, prepare command as already been closed`, Errors.ER_PREPARE_CLOSED, null, '22000', this.query);\n      if (!_cb) {\n        return Promise.reject(error);\n      } else {\n        _cb(error);\n        return;\n      }\n    }\n    const cmdParam = new CommandParameter(this.query, values, _opts, _cb);\n    if (stack) cmdParam.stack = stack;\n    const conn = this.conn;\n    const promise = new Promise((resolve, reject) => conn.executePromise.call(conn, cmdParam, this, resolve, reject));\n    if (!_cb) {\n      return promise;\n    } else {\n      promise.then(res => {\n        if (_cb) _cb(null, res, null);\n      }).catch(_cb || function (err) {});\n    }\n  }\n  executeStream(values, opts, cb, stack) {\n    let _opts = opts,\n      _cb = cb;\n    if (typeof _opts === 'function') {\n      _cb = _opts;\n      _opts = undefined;\n    }\n    if (this.isClose()) {\n      const error = Errors.createError(`Execute fails, prepare command as already been closed`, Errors.ER_PREPARE_CLOSED, null, '22000', this.query);\n      if (!_cb) {\n        throw error;\n      } else {\n        _cb(error);\n        return;\n      }\n    }\n    const cmdParam = new CommandParameter(this.query, values, _opts, cb);\n    if (stack) cmdParam.stack = stack;\n    const cmd = new ExecuteStream(cmdParam, this.conn.opts, this, this.conn.socket);\n    if (this.conn.opts.logger.error) cmd.on('error', this.conn.opts.logger.error);\n    this.conn.addCommand(cmd);\n    return cmd.inStream;\n  }\n  isClose() {\n    return this.closed;\n  }\n  close() {\n    if (!this.closed) {\n      this.closed = true;\n      this.#conn.emit('close_prepare', this);\n    }\n  }\n  toString() {\n    return 'Prepare{closed:' + this.closed + '}';\n  }\n}\nmodule.exports = PrepareResultPacket;","map":{"version":3,"names":["CommandParameter","require","Errors","ExecuteStream","PrepareResultPacket","conn","constructor","statementId","parameterCount","columns","database","sql","placeHolderIndex","id","query","closed","_placeHolderIndex","execute","values","opts","cb","stack","_opts","_cb","undefined","isClose","error","createError","ER_PREPARE_CLOSED","Promise","reject","cmdParam","promise","resolve","executePromise","call","then","res","catch","err","executeStream","cmd","socket","logger","on","addCommand","inStream","close","emit","toString","module","exports"],"sources":["/home/warameur/Documents/velocity-data-viz/node_modules/mariadb/lib/cmd/class/prepare-result-packet.js"],"sourcesContent":["'use strict';\nconst CommandParameter = require('../../command-parameter');\nconst Errors = require('../../misc/errors');\nconst ExecuteStream = require('../execute-stream');\n\n/**\n * Prepare result\n * see https://mariadb.com/kb/en/com_stmt_prepare/#com_stmt_prepare_ok\n */\nclass PrepareResultPacket {\n  #conn;\n  constructor(statementId, parameterCount, columns, database, sql, placeHolderIndex, conn) {\n    this.id = statementId;\n    this.parameterCount = parameterCount;\n    this.columns = columns;\n    this.database = database;\n    this.query = sql;\n    this.closed = false;\n    this._placeHolderIndex = placeHolderIndex;\n    this.#conn = conn;\n  }\n\n  get conn() {\n    return this.#conn;\n  }\n\n  execute(values, opts, cb, stack) {\n    let _opts = opts,\n      _cb = cb;\n\n    if (typeof _opts === 'function') {\n      _cb = _opts;\n      _opts = undefined;\n    }\n\n    if (this.isClose()) {\n      const error = Errors.createError(\n        `Execute fails, prepare command as already been closed`,\n        Errors.ER_PREPARE_CLOSED,\n        null,\n        '22000',\n        this.query\n      );\n\n      if (!_cb) {\n        return Promise.reject(error);\n      } else {\n        _cb(error);\n        return;\n      }\n    }\n\n    const cmdParam = new CommandParameter(this.query, values, _opts, _cb);\n    if (stack) cmdParam.stack = stack;\n    const conn = this.conn;\n    const promise = new Promise((resolve, reject) => conn.executePromise.call(conn, cmdParam, this, resolve, reject));\n    if (!_cb) {\n      return promise;\n    } else {\n      promise\n        .then((res) => {\n          if (_cb) _cb(null, res, null);\n        })\n        .catch(_cb || function (err) {});\n    }\n  }\n\n  executeStream(values, opts, cb, stack) {\n    let _opts = opts,\n      _cb = cb;\n\n    if (typeof _opts === 'function') {\n      _cb = _opts;\n      _opts = undefined;\n    }\n\n    if (this.isClose()) {\n      const error = Errors.createError(\n        `Execute fails, prepare command as already been closed`,\n        Errors.ER_PREPARE_CLOSED,\n        null,\n        '22000',\n        this.query\n      );\n\n      if (!_cb) {\n        throw error;\n      } else {\n        _cb(error);\n        return;\n      }\n    }\n\n    const cmdParam = new CommandParameter(this.query, values, _opts, cb);\n    if (stack) cmdParam.stack = stack;\n\n    const cmd = new ExecuteStream(cmdParam, this.conn.opts, this, this.conn.socket);\n    if (this.conn.opts.logger.error) cmd.on('error', this.conn.opts.logger.error);\n    this.conn.addCommand(cmd);\n    return cmd.inStream;\n  }\n\n  isClose() {\n    return this.closed;\n  }\n\n  close() {\n    if (!this.closed) {\n      this.closed = true;\n      this.#conn.emit('close_prepare', this);\n    }\n  }\n  toString() {\n    return 'Prepare{closed:' + this.closed + '}';\n  }\n}\n\nmodule.exports = PrepareResultPacket;\n"],"mappings":"AAAA,YAAY;;AACZ,MAAMA,gBAAgB,GAAGC,OAAO,CAAC,yBAAyB,CAAC;AAC3D,MAAMC,MAAM,GAAGD,OAAO,CAAC,mBAAmB,CAAC;AAC3C,MAAME,aAAa,GAAGF,OAAO,CAAC,mBAAmB,CAAC;;AAElD;AACA;AACA;AACA;AACA,MAAMG,mBAAmB,CAAC;EACxB,CAACC,IAAI;EACLC,WAAWA,CAACC,WAAW,EAAEC,cAAc,EAAEC,OAAO,EAAEC,QAAQ,EAAEC,GAAG,EAAEC,gBAAgB,EAAEP,IAAI,EAAE;IACvF,IAAI,CAACQ,EAAE,GAAGN,WAAW;IACrB,IAAI,CAACC,cAAc,GAAGA,cAAc;IACpC,IAAI,CAACC,OAAO,GAAGA,OAAO;IACtB,IAAI,CAACC,QAAQ,GAAGA,QAAQ;IACxB,IAAI,CAACI,KAAK,GAAGH,GAAG;IAChB,IAAI,CAACI,MAAM,GAAG,KAAK;IACnB,IAAI,CAACC,iBAAiB,GAAGJ,gBAAgB;IACzC,IAAI,CAAC,CAACP,IAAI,GAAGA,IAAI;EACnB;EAEA,IAAIA,IAAIA,CAAA,EAAG;IACT,OAAO,IAAI,CAAC,CAACA,IAAI;EACnB;EAEAY,OAAOA,CAACC,MAAM,EAAEC,IAAI,EAAEC,EAAE,EAAEC,KAAK,EAAE;IAC/B,IAAIC,KAAK,GAAGH,IAAI;MACdI,GAAG,GAAGH,EAAE;IAEV,IAAI,OAAOE,KAAK,KAAK,UAAU,EAAE;MAC/BC,GAAG,GAAGD,KAAK;MACXA,KAAK,GAAGE,SAAS;IACnB;IAEA,IAAI,IAAI,CAACC,OAAO,EAAE,EAAE;MAClB,MAAMC,KAAK,GAAGxB,MAAM,CAACyB,WAAW,CAC7B,uDAAsD,EACvDzB,MAAM,CAAC0B,iBAAiB,EACxB,IAAI,EACJ,OAAO,EACP,IAAI,CAACd,KAAK,CACX;MAED,IAAI,CAACS,GAAG,EAAE;QACR,OAAOM,OAAO,CAACC,MAAM,CAACJ,KAAK,CAAC;MAC9B,CAAC,MAAM;QACLH,GAAG,CAACG,KAAK,CAAC;QACV;MACF;IACF;IAEA,MAAMK,QAAQ,GAAG,IAAI/B,gBAAgB,CAAC,IAAI,CAACc,KAAK,EAAEI,MAAM,EAAEI,KAAK,EAAEC,GAAG,CAAC;IACrE,IAAIF,KAAK,EAAEU,QAAQ,CAACV,KAAK,GAAGA,KAAK;IACjC,MAAMhB,IAAI,GAAG,IAAI,CAACA,IAAI;IACtB,MAAM2B,OAAO,GAAG,IAAIH,OAAO,CAAC,CAACI,OAAO,EAAEH,MAAM,KAAKzB,IAAI,CAAC6B,cAAc,CAACC,IAAI,CAAC9B,IAAI,EAAE0B,QAAQ,EAAE,IAAI,EAAEE,OAAO,EAAEH,MAAM,CAAC,CAAC;IACjH,IAAI,CAACP,GAAG,EAAE;MACR,OAAOS,OAAO;IAChB,CAAC,MAAM;MACLA,OAAO,CACJI,IAAI,CAAEC,GAAG,IAAK;QACb,IAAId,GAAG,EAAEA,GAAG,CAAC,IAAI,EAAEc,GAAG,EAAE,IAAI,CAAC;MAC/B,CAAC,CAAC,CACDC,KAAK,CAACf,GAAG,IAAI,UAAUgB,GAAG,EAAE,CAAC,CAAC,CAAC;IACpC;EACF;EAEAC,aAAaA,CAACtB,MAAM,EAAEC,IAAI,EAAEC,EAAE,EAAEC,KAAK,EAAE;IACrC,IAAIC,KAAK,GAAGH,IAAI;MACdI,GAAG,GAAGH,EAAE;IAEV,IAAI,OAAOE,KAAK,KAAK,UAAU,EAAE;MAC/BC,GAAG,GAAGD,KAAK;MACXA,KAAK,GAAGE,SAAS;IACnB;IAEA,IAAI,IAAI,CAACC,OAAO,EAAE,EAAE;MAClB,MAAMC,KAAK,GAAGxB,MAAM,CAACyB,WAAW,CAC7B,uDAAsD,EACvDzB,MAAM,CAAC0B,iBAAiB,EACxB,IAAI,EACJ,OAAO,EACP,IAAI,CAACd,KAAK,CACX;MAED,IAAI,CAACS,GAAG,EAAE;QACR,MAAMG,KAAK;MACb,CAAC,MAAM;QACLH,GAAG,CAACG,KAAK,CAAC;QACV;MACF;IACF;IAEA,MAAMK,QAAQ,GAAG,IAAI/B,gBAAgB,CAAC,IAAI,CAACc,KAAK,EAAEI,MAAM,EAAEI,KAAK,EAAEF,EAAE,CAAC;IACpE,IAAIC,KAAK,EAAEU,QAAQ,CAACV,KAAK,GAAGA,KAAK;IAEjC,MAAMoB,GAAG,GAAG,IAAItC,aAAa,CAAC4B,QAAQ,EAAE,IAAI,CAAC1B,IAAI,CAACc,IAAI,EAAE,IAAI,EAAE,IAAI,CAACd,IAAI,CAACqC,MAAM,CAAC;IAC/E,IAAI,IAAI,CAACrC,IAAI,CAACc,IAAI,CAACwB,MAAM,CAACjB,KAAK,EAAEe,GAAG,CAACG,EAAE,CAAC,OAAO,EAAE,IAAI,CAACvC,IAAI,CAACc,IAAI,CAACwB,MAAM,CAACjB,KAAK,CAAC;IAC7E,IAAI,CAACrB,IAAI,CAACwC,UAAU,CAACJ,GAAG,CAAC;IACzB,OAAOA,GAAG,CAACK,QAAQ;EACrB;EAEArB,OAAOA,CAAA,EAAG;IACR,OAAO,IAAI,CAACV,MAAM;EACpB;EAEAgC,KAAKA,CAAA,EAAG;IACN,IAAI,CAAC,IAAI,CAAChC,MAAM,EAAE;MAChB,IAAI,CAACA,MAAM,GAAG,IAAI;MAClB,IAAI,CAAC,CAACV,IAAI,CAAC2C,IAAI,CAAC,eAAe,EAAE,IAAI,CAAC;IACxC;EACF;EACAC,QAAQA,CAAA,EAAG;IACT,OAAO,iBAAiB,GAAG,IAAI,CAAClC,MAAM,GAAG,GAAG;EAC9C;AACF;AAEAmC,MAAM,CAACC,OAAO,GAAG/C,mBAAmB"},"metadata":{},"sourceType":"script","externalDependencies":[]}