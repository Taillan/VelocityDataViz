{"ast":null,"code":"'use strict';\n\nconst Parser = require('./parser');\nconst Errors = require('../misc/errors');\nconst BinaryEncoder = require('./encoder/binary-encoder');\nconst BinaryDecoder = require('./decoder/binary-decoder');\nconst FieldType = require('../const/field-type');\n\n/**\n * Protocol COM_STMT_EXECUTE\n * see : https://mariadb.com/kb/en/com_stmt_execute/\n */\nclass Execute extends Parser {\n  constructor(resolve, reject, connOpts, cmdParam, prepare) {\n    super(resolve, reject, connOpts, cmdParam);\n    this.encoder = new BinaryEncoder(this.opts);\n    this.binary = true;\n    this.prepare = prepare;\n    this.canSkipMeta = true;\n  }\n\n  /**\n   * Send COM_QUERY\n   *\n   * @param out   output writer\n   * @param opts  connection options\n   * @param info  connection information\n   */\n  start(out, opts, info) {\n    this.onPacketReceive = this.readResponsePacket;\n    this.values = [];\n    if (this.opts.namedPlaceholders && this.prepare._placeHolderIndex) {\n      // using named placeholders, so change values accordingly\n      this.values = new Array(this.prepare.parameterCount);\n      if (this.initialValues) {\n        for (let i = 0; i < this.prepare._placeHolderIndex.length; i++) {\n          this.values[i] = this.initialValues[this.prepare._placeHolderIndex[i]];\n        }\n      }\n    } else {\n      if (this.initialValues) this.values = Array.isArray(this.initialValues) ? this.initialValues : [this.initialValues];\n    }\n    if (!this.validateParameters(info)) return;\n\n    // send long data using COM_STMT_SEND_LONG_DATA\n    this.longDataStep = false; // send long data\n    for (let i = 0; i < this.prepare.parameterCount; i++) {\n      const value = this.values[i];\n      if (value !== null && (typeof value === 'object' && typeof value.pipe === 'function' && typeof value.read === 'function' || Buffer.isBuffer(value))) {\n        if (opts.logger.query) opts.logger.query(`EXECUTE: (${this.prepare.id}) sql: ${opts.logger.logParam ? this.displaySql() : this.sql}`);\n        if (!this.longDataStep) {\n          this.longDataStep = true;\n          this.registerStreamSendEvent(out, info);\n          this.currentParam = i;\n        }\n        this.sendComStmtLongData(out, info, value);\n        return;\n      }\n    }\n    if (!this.longDataStep) {\n      // no stream parameter, so can send directly\n      if (opts.logger.query) opts.logger.query(`EXECUTE: (${this.prepare.id}) sql: ${opts.logger.logParam ? this.displaySql() : this.sql}`);\n      this.sendComStmtExecute(out, info);\n    }\n  }\n\n  /**\n   * Validate that parameters exists and are defined.\n   *\n   * @param info        connection info\n   * @returns {boolean} return false if any error occur.\n   */\n  validateParameters(info) {\n    //validate parameter size.\n    if (this.prepare.parameterCount > this.values.length) {\n      this.emit('send_end');\n      this.throwNewError(`Parameter at position ${this.values.length} is not set\\\\nsql: ${this.displaySql()}`, false, info, 'HY000', Errors.ER_MISSING_PARAMETER);\n      return false;\n    }\n\n    //validate parameter is defined.\n    for (let i = 0; i < this.prepare.parameterCount; i++) {\n      if (this.values[i] === undefined) {\n        this.emit('send_end');\n        let errMsg = `Parameter at position ${i} is undefined`;\n        if (this.opts.namedPlaceholders && this.prepare._placeHolderIndex) {\n          errMsg = `Parameter named ${this.prepare._placeHolderIndex[i]} is not set`;\n        }\n        this.throwNewError(errMsg + '\\nsql: ' + this.displaySql(), false, info, 'HY000', Errors.ER_PARAMETER_UNDEFINED);\n        return false;\n      }\n\n      // special check for GEOJSON that can be null even if object is not\n      if (this.values[i] && this.values[i].type != null && ['Point', 'LineString', 'Polygon', 'MultiPoint', 'MultiLineString', 'MultiPolygon', 'GeometryCollection'].includes(this.values[i].type)) {\n        const geoBuff = BinaryEncoder.getBufferFromGeometryValue(this.values[i]);\n        if (geoBuff == null) {\n          this.values[i] = null;\n        } else {\n          this.values[i] = Buffer.concat([Buffer.from([0, 0, 0, 0]),\n          // SRID\n          geoBuff // WKB\n          ]);\n        }\n      }\n    }\n\n    return true;\n  }\n  sendComStmtLongData(out, info, value) {\n    out.startPacket(this);\n    out.writeInt8(0x18);\n    out.writeInt32(this.prepare.id);\n    out.writeInt16(this.currentParam);\n    if (Buffer.isBuffer(value)) {\n      out.writeBuffer(value, 0, value.length);\n      out.flush();\n      this.currentParam++;\n      return this.paramWritten();\n    }\n    this.sending = true;\n\n    // streaming\n    value.on('data', function (chunk) {\n      out.writeBuffer(chunk, 0, chunk.length);\n    });\n    value.on('end', function () {\n      out.flush();\n      this.currentParam++;\n      this.paramWritten();\n    }.bind(this));\n  }\n\n  /**\n   * Send a COM_STMT_EXECUTE\n   * @param out\n   * @param info\n   */\n  sendComStmtExecute(out, info) {\n    const parameterCount = this.prepare.parameterCount;\n    let nullCount = Math.floor((parameterCount + 7) / 8);\n    const nullBitsBuffer = Buffer.alloc(nullCount);\n    for (let i = 0; i < parameterCount; i++) {\n      if (this.values[i] === null) {\n        nullBitsBuffer[Math.floor(i / 8)] |= 1 << i % 8;\n      }\n    }\n    out.startPacket(this);\n    out.writeInt8(0x17); // COM_STMT_EXECUTE\n    out.writeInt32(this.prepare.id); // Statement id\n    out.writeInt8(0); // no cursor flag\n    out.writeInt32(1); // 1 command\n    out.writeBuffer(nullBitsBuffer, 0, nullCount); // null buffer\n    out.writeInt8(1); // always send type to server\n\n    // send types\n    for (let i = 0; i < parameterCount; i++) {\n      const val = this.values[i];\n      if (val != null) {\n        switch (typeof val) {\n          case 'boolean':\n            out.writeInt8(FieldType.TINY);\n            break;\n          case 'bigint':\n            if (val >= 2n ** 63n) {\n              out.writeInt8(FieldType.NEWDECIMAL);\n            } else {\n              out.writeInt8(FieldType.BIGINT);\n            }\n            break;\n          case 'number':\n            // additional verification, to permit query without type,\n            // like 'SELECT ?' returning same type of value\n            if (Number.isSafeInteger(val) && val >= -2147483648 && val < 2147483647) {\n              out.writeInt8(FieldType.INT);\n              break;\n            }\n            out.writeInt8(FieldType.DOUBLE);\n            break;\n          case 'string':\n            out.writeInt8(FieldType.VAR_STRING);\n            break;\n          case 'object':\n            if (val instanceof Date) {\n              out.writeInt8(FieldType.DATETIME);\n            } else if (Buffer.isBuffer(val)) {\n              out.writeInt8(FieldType.BLOB);\n            } else if (typeof val.toSqlString === 'function') {\n              out.writeInt8(FieldType.VAR_STRING);\n            } else if (typeof val.pipe === 'function' && typeof val.read === 'function') {\n              out.writeInt8(FieldType.BLOB);\n            } else {\n              out.writeInt8(FieldType.VAR_STRING);\n            }\n            break;\n          default:\n            out.writeInt8(FieldType.BLOB);\n            break;\n        }\n      } else {\n        out.writeInt8(FieldType.VAR_STRING);\n      }\n      out.writeInt8(0);\n    }\n\n    //********************************************\n    // send not null / not streaming values\n    //********************************************\n    for (let i = 0; i < parameterCount; i++) {\n      const value = this.values[i];\n      if (value !== null && !(typeof value === 'object' && typeof value.pipe === 'function' && typeof value.read === 'function') && !Buffer.isBuffer(value)) {\n        this.encoder.writeParam(out, value, this.opts, info);\n      }\n    }\n    out.flush();\n    this.sending = false;\n    this.emit('send_end');\n  }\n\n  /**\n   * Define params events.\n   * Each parameter indicate that he is written to socket,\n   * emitting event so next stream parameter can be written.\n   */\n  registerStreamSendEvent(out, info) {\n    // note : Implementation use recursive calls, but stack won't never get near v8 max call stack size\n    //since event launched for stream parameter only\n    this.paramWritten = function () {\n      if (this.longDataStep) {\n        for (; this.currentParam < this.prepare.parameterCount; this.currentParam++) {\n          const value = this.values[this.currentParam];\n          if (value !== null && typeof value === 'object' && typeof value.pipe === 'function' && typeof value.read === 'function' || Buffer.isBuffer(value)) {\n            this.sendComStmtLongData(out, info, value);\n            return;\n          }\n        }\n        this.longDataStep = false; // all streams have been send\n      }\n\n      if (!this.longDataStep) {\n        this.sendComStmtExecute(out, info);\n      }\n    }.bind(this);\n  }\n}\nmodule.exports = Execute;","map":{"version":3,"names":["Parser","require","Errors","BinaryEncoder","BinaryDecoder","FieldType","Execute","constructor","resolve","reject","connOpts","cmdParam","prepare","encoder","opts","binary","canSkipMeta","start","out","info","onPacketReceive","readResponsePacket","values","namedPlaceholders","_placeHolderIndex","Array","parameterCount","initialValues","i","length","isArray","validateParameters","longDataStep","value","pipe","read","Buffer","isBuffer","logger","query","id","logParam","displaySql","sql","registerStreamSendEvent","currentParam","sendComStmtLongData","sendComStmtExecute","emit","throwNewError","ER_MISSING_PARAMETER","undefined","errMsg","ER_PARAMETER_UNDEFINED","type","includes","geoBuff","getBufferFromGeometryValue","concat","from","startPacket","writeInt8","writeInt32","writeInt16","writeBuffer","flush","paramWritten","sending","on","chunk","bind","nullCount","Math","floor","nullBitsBuffer","alloc","val","TINY","NEWDECIMAL","BIGINT","Number","isSafeInteger","INT","DOUBLE","VAR_STRING","Date","DATETIME","BLOB","toSqlString","writeParam","module","exports"],"sources":["/home/warameur/Documents/velocity-data-viz/node_modules/mariadb/lib/cmd/execute.js"],"sourcesContent":["'use strict';\n\nconst Parser = require('./parser');\nconst Errors = require('../misc/errors');\nconst BinaryEncoder = require('./encoder/binary-encoder');\nconst BinaryDecoder = require('./decoder/binary-decoder');\nconst FieldType = require('../const/field-type');\n\n/**\n * Protocol COM_STMT_EXECUTE\n * see : https://mariadb.com/kb/en/com_stmt_execute/\n */\nclass Execute extends Parser {\n  constructor(resolve, reject, connOpts, cmdParam, prepare) {\n    super(resolve, reject, connOpts, cmdParam);\n    this.encoder = new BinaryEncoder(this.opts);\n    this.binary = true;\n    this.prepare = prepare;\n    this.canSkipMeta = true;\n  }\n\n  /**\n   * Send COM_QUERY\n   *\n   * @param out   output writer\n   * @param opts  connection options\n   * @param info  connection information\n   */\n  start(out, opts, info) {\n    this.onPacketReceive = this.readResponsePacket;\n    this.values = [];\n\n    if (this.opts.namedPlaceholders && this.prepare._placeHolderIndex) {\n      // using named placeholders, so change values accordingly\n      this.values = new Array(this.prepare.parameterCount);\n      if (this.initialValues) {\n        for (let i = 0; i < this.prepare._placeHolderIndex.length; i++) {\n          this.values[i] = this.initialValues[this.prepare._placeHolderIndex[i]];\n        }\n      }\n    } else {\n      if (this.initialValues)\n        this.values = Array.isArray(this.initialValues) ? this.initialValues : [this.initialValues];\n    }\n\n    if (!this.validateParameters(info)) return;\n\n    // send long data using COM_STMT_SEND_LONG_DATA\n    this.longDataStep = false; // send long data\n    for (let i = 0; i < this.prepare.parameterCount; i++) {\n      const value = this.values[i];\n      if (\n        value !== null &&\n        ((typeof value === 'object' && typeof value.pipe === 'function' && typeof value.read === 'function') ||\n          Buffer.isBuffer(value))\n      ) {\n        if (opts.logger.query)\n          opts.logger.query(\n            `EXECUTE: (${this.prepare.id}) sql: ${opts.logger.logParam ? this.displaySql() : this.sql}`\n          );\n        if (!this.longDataStep) {\n          this.longDataStep = true;\n          this.registerStreamSendEvent(out, info);\n          this.currentParam = i;\n        }\n        this.sendComStmtLongData(out, info, value);\n        return;\n      }\n    }\n\n    if (!this.longDataStep) {\n      // no stream parameter, so can send directly\n      if (opts.logger.query)\n        opts.logger.query(`EXECUTE: (${this.prepare.id}) sql: ${opts.logger.logParam ? this.displaySql() : this.sql}`);\n      this.sendComStmtExecute(out, info);\n    }\n  }\n\n  /**\n   * Validate that parameters exists and are defined.\n   *\n   * @param info        connection info\n   * @returns {boolean} return false if any error occur.\n   */\n  validateParameters(info) {\n    //validate parameter size.\n    if (this.prepare.parameterCount > this.values.length) {\n      this.emit('send_end');\n      this.throwNewError(\n        `Parameter at position ${this.values.length} is not set\\\\nsql: ${this.displaySql()}`,\n        false,\n        info,\n        'HY000',\n        Errors.ER_MISSING_PARAMETER\n      );\n      return false;\n    }\n\n    //validate parameter is defined.\n    for (let i = 0; i < this.prepare.parameterCount; i++) {\n      if (this.values[i] === undefined) {\n        this.emit('send_end');\n        let errMsg = `Parameter at position ${i} is undefined`;\n        if (this.opts.namedPlaceholders && this.prepare._placeHolderIndex) {\n          errMsg = `Parameter named ${this.prepare._placeHolderIndex[i]} is not set`;\n        }\n\n        this.throwNewError(errMsg + '\\nsql: ' + this.displaySql(), false, info, 'HY000', Errors.ER_PARAMETER_UNDEFINED);\n        return false;\n      }\n\n      // special check for GEOJSON that can be null even if object is not\n      if (\n        this.values[i] &&\n        this.values[i].type != null &&\n        [\n          'Point',\n          'LineString',\n          'Polygon',\n          'MultiPoint',\n          'MultiLineString',\n          'MultiPolygon',\n          'GeometryCollection'\n        ].includes(this.values[i].type)\n      ) {\n        const geoBuff = BinaryEncoder.getBufferFromGeometryValue(this.values[i]);\n        if (geoBuff == null) {\n          this.values[i] = null;\n        } else {\n          this.values[i] = Buffer.concat([\n            Buffer.from([0, 0, 0, 0]), // SRID\n            geoBuff // WKB\n          ]);\n        }\n      }\n    }\n    return true;\n  }\n\n  sendComStmtLongData(out, info, value) {\n    out.startPacket(this);\n    out.writeInt8(0x18);\n    out.writeInt32(this.prepare.id);\n    out.writeInt16(this.currentParam);\n\n    if (Buffer.isBuffer(value)) {\n      out.writeBuffer(value, 0, value.length);\n      out.flush();\n      this.currentParam++;\n      return this.paramWritten();\n    }\n    this.sending = true;\n\n    // streaming\n    value.on('data', function (chunk) {\n      out.writeBuffer(chunk, 0, chunk.length);\n    });\n\n    value.on(\n      'end',\n      function () {\n        out.flush();\n        this.currentParam++;\n        this.paramWritten();\n      }.bind(this)\n    );\n  }\n\n  /**\n   * Send a COM_STMT_EXECUTE\n   * @param out\n   * @param info\n   */\n  sendComStmtExecute(out, info) {\n    const parameterCount = this.prepare.parameterCount;\n\n    let nullCount = Math.floor((parameterCount + 7) / 8);\n    const nullBitsBuffer = Buffer.alloc(nullCount);\n    for (let i = 0; i < parameterCount; i++) {\n      if (this.values[i] === null) {\n        nullBitsBuffer[Math.floor(i / 8)] |= 1 << i % 8;\n      }\n    }\n\n    out.startPacket(this);\n    out.writeInt8(0x17); // COM_STMT_EXECUTE\n    out.writeInt32(this.prepare.id); // Statement id\n    out.writeInt8(0); // no cursor flag\n    out.writeInt32(1); // 1 command\n    out.writeBuffer(nullBitsBuffer, 0, nullCount); // null buffer\n    out.writeInt8(1); // always send type to server\n\n    // send types\n    for (let i = 0; i < parameterCount; i++) {\n      const val = this.values[i];\n      if (val != null) {\n        switch (typeof val) {\n          case 'boolean':\n            out.writeInt8(FieldType.TINY);\n            break;\n          case 'bigint':\n            if (val >= 2n ** 63n) {\n              out.writeInt8(FieldType.NEWDECIMAL);\n            } else {\n              out.writeInt8(FieldType.BIGINT);\n            }\n            break;\n          case 'number':\n            // additional verification, to permit query without type,\n            // like 'SELECT ?' returning same type of value\n            if (Number.isSafeInteger(val) && val >= -2147483648 && val < 2147483647) {\n              out.writeInt8(FieldType.INT);\n              break;\n            }\n            out.writeInt8(FieldType.DOUBLE);\n            break;\n          case 'string':\n            out.writeInt8(FieldType.VAR_STRING);\n            break;\n          case 'object':\n            if (val instanceof Date) {\n              out.writeInt8(FieldType.DATETIME);\n            } else if (Buffer.isBuffer(val)) {\n              out.writeInt8(FieldType.BLOB);\n            } else if (typeof val.toSqlString === 'function') {\n              out.writeInt8(FieldType.VAR_STRING);\n            } else if (typeof val.pipe === 'function' && typeof val.read === 'function') {\n              out.writeInt8(FieldType.BLOB);\n            } else {\n              out.writeInt8(FieldType.VAR_STRING);\n            }\n            break;\n          default:\n            out.writeInt8(FieldType.BLOB);\n            break;\n        }\n      } else {\n        out.writeInt8(FieldType.VAR_STRING);\n      }\n      out.writeInt8(0);\n    }\n\n    //********************************************\n    // send not null / not streaming values\n    //********************************************\n    for (let i = 0; i < parameterCount; i++) {\n      const value = this.values[i];\n      if (\n        value !== null &&\n        !(typeof value === 'object' && typeof value.pipe === 'function' && typeof value.read === 'function') &&\n        !Buffer.isBuffer(value)\n      ) {\n        this.encoder.writeParam(out, value, this.opts, info);\n      }\n    }\n    out.flush();\n    this.sending = false;\n    this.emit('send_end');\n  }\n\n  /**\n   * Define params events.\n   * Each parameter indicate that he is written to socket,\n   * emitting event so next stream parameter can be written.\n   */\n  registerStreamSendEvent(out, info) {\n    // note : Implementation use recursive calls, but stack won't never get near v8 max call stack size\n    //since event launched for stream parameter only\n    this.paramWritten = function () {\n      if (this.longDataStep) {\n        for (; this.currentParam < this.prepare.parameterCount; this.currentParam++) {\n          const value = this.values[this.currentParam];\n          if (\n            (value !== null &&\n              typeof value === 'object' &&\n              typeof value.pipe === 'function' &&\n              typeof value.read === 'function') ||\n            Buffer.isBuffer(value)\n          ) {\n            this.sendComStmtLongData(out, info, value);\n            return;\n          }\n        }\n        this.longDataStep = false; // all streams have been send\n      }\n\n      if (!this.longDataStep) {\n        this.sendComStmtExecute(out, info);\n      }\n    }.bind(this);\n  }\n}\n\nmodule.exports = Execute;\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}