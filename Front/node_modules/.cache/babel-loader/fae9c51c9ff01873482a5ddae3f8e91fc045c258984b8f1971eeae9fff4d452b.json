{"ast":null,"code":"'use strict';\n\nconst Parser = require('./parser');\nconst Errors = require('../misc/errors');\nconst Parse = require('../misc/parse');\nconst TextEncoder = require('./encoder/text-encoder');\nconst QUOTE = 0x27;\n\n/**\n * Protocol COM_QUERY\n * see : https://mariadb.com/kb/en/library/com_query/\n */\nclass Query extends Parser {\n  constructor(resolve, reject, connOpts, cmdParam) {\n    super(resolve, reject, connOpts, cmdParam);\n    this.encoder = new TextEncoder(this.opts);\n    this.binary = false;\n  }\n\n  /**\n   * Send COM_QUERY\n   *\n   * @param out   output writer\n   * @param opts  connection options\n   * @param info  connection information\n   */\n  start(out, opts, info) {\n    if (opts.logger.query) opts.logger.query(`QUERY: ${opts.logger.logParam ? this.displaySql() : this.sql}`);\n    this.onPacketReceive = this.readResponsePacket;\n    if (this.initialValues === undefined) {\n      //shortcut if no parameters\n      out.startPacket(this);\n      out.writeInt8(0x03);\n      if (!this.handleTimeout(out, info)) return;\n      out.writeString(this.sql);\n      out.flush();\n      this.emit('send_end');\n      return;\n    }\n    this.encodedSql = out.encodeString(this.sql);\n    if (this.opts.namedPlaceholders) {\n      try {\n        const parsed = Parse.splitQueryPlaceholder(this.encodedSql, info, this.initialValues, this.displaySql.bind(this));\n        this.paramPositions = parsed.paramPositions;\n        this.values = parsed.values;\n      } catch (err) {\n        this.emit('send_end');\n        return this.throwError(err, info);\n      }\n    } else {\n      this.paramPositions = Parse.splitQuery(this.encodedSql);\n      this.values = Array.isArray(this.initialValues) ? this.initialValues : [this.initialValues];\n      if (!this.validateParameters(info)) return;\n    }\n    out.startPacket(this);\n    out.writeInt8(0x03);\n    if (!this.handleTimeout(out, info)) return;\n    this.paramPos = 0;\n    this.sqlPos = 0;\n\n    //********************************************\n    // send params\n    //********************************************\n    const len = this.paramPositions.length / 2;\n    for (this.valueIdx = 0; this.valueIdx < len;) {\n      out.writeBuffer(this.encodedSql, this.sqlPos, this.paramPositions[this.paramPos++] - this.sqlPos);\n      this.sqlPos = this.paramPositions[this.paramPos++];\n      const value = this.values[this.valueIdx++];\n      if (value !== null && typeof value === 'object' && typeof value.pipe === 'function' && typeof value.read === 'function') {\n        this.sending = true;\n        //********************************************\n        // param is stream,\n        // now all params will be written by event\n        //********************************************\n        this.paramWritten = this.#paramWritten.bind(this, out, info);\n        out.writeInt8(QUOTE); //'\n        value.on('data', out.writeBufferEscape.bind(out));\n        value.on('end', function () {\n          out.writeInt8(QUOTE); //'\n          this.paramWritten();\n        }.bind(this));\n        return;\n      } else {\n        //********************************************\n        // param isn't stream. directly write in buffer\n        //********************************************\n        this.encoder.writeParam(out, value, this.opts, info);\n      }\n    }\n    out.writeBuffer(this.encodedSql, this.sqlPos, this.encodedSql.length - this.sqlPos);\n    out.flush();\n    this.emit('send_end');\n  }\n\n  /**\n   * If timeout is set, prepend query with SET STATEMENT max_statement_time=xx FOR, or throw an error\n   * @param out buffer\n   * @param info server information\n   * @returns {boolean} false if an error has been thrown\n   */\n  handleTimeout(out, info) {\n    if (this.opts.timeout) {\n      if (info.isMariaDB()) {\n        if (info.hasMinVersion(10, 1, 2)) {\n          out.writeString(`SET STATEMENT max_statement_time=${this.opts.timeout / 1000} FOR `);\n          return true;\n        } else {\n          const err = Errors.createError(`Cannot use timeout for MariaDB server before 10.1.2. timeout value: ${this.opts.timeout}`, Errors.ER_TIMEOUT_NOT_SUPPORTED, info, 'HY000', this.sql);\n          this.emit('send_end');\n          this.throwError(err, info);\n          return false;\n        }\n      } else {\n        //not available for MySQL\n        // max_execution time exist, but only for select, and as hint\n        const err = Errors.createError(`Cannot use timeout for MySQL server. timeout value: ${this.opts.timeout}`, Errors.ER_TIMEOUT_NOT_SUPPORTED, info, 'HY000', this.sql);\n        this.emit('send_end');\n        this.throwError(err, info);\n        return false;\n      }\n    }\n    return true;\n  }\n\n  /**\n   * Validate that parameters exists and are defined.\n   *\n   * @param info        connection info\n   * @returns {boolean} return false if any error occur.\n   */\n  validateParameters(info) {\n    //validate parameter size.\n    if (this.paramPositions.length / 2 > this.values.length) {\n      this.emit('send_end');\n      this.throwNewError(`Parameter at position ${this.values.length + 1} is not set`, false, info, 'HY000', Errors.ER_MISSING_PARAMETER);\n      return false;\n    }\n\n    //validate parameter is defined.\n    for (let i = 0; i < this.paramPositions.length / 2; i++) {\n      if (this.values[i] === undefined) {\n        this.emit('send_end');\n        this.throwNewError(`Parameter at position ${i + 1} is undefined\\n${this.displaySql()}`, false, info, 'HY000', Errors.ER_PARAMETER_UNDEFINED);\n        return false;\n      }\n    }\n    return true;\n  }\n  #paramWritten(out, info) {\n    while (true) {\n      if (this.valueIdx === this.paramPositions.length / 2) {\n        //********************************************\n        // all parameters are written.\n        // flush packet\n        //********************************************\n        out.writeBuffer(this.encodedSql, this.sqlPos, this.encodedSql.length - this.sqlPos);\n        out.flush();\n        this.sending = false;\n        this.emit('send_end');\n        return;\n      } else {\n        const value = this.values[this.valueIdx++];\n        out.writeBuffer(this.encodedSql, this.sqlPos, this.paramPositions[this.paramPos++] - this.sqlPos);\n        this.sqlPos = this.paramPositions[this.paramPos++];\n        if (value === null) {\n          out.writeStringAscii('NULL');\n          continue;\n        }\n        if (typeof value === 'object' && typeof value.pipe === 'function' && typeof value.read === 'function') {\n          //********************************************\n          // param is stream,\n          //********************************************\n          out.writeInt8(QUOTE);\n          value.once('end', function () {\n            out.writeInt8(QUOTE);\n            this.#paramWritten(out, info);\n          }.bind(this));\n          value.on('data', out.writeBufferEscape.bind(out));\n          return;\n        }\n\n        //********************************************\n        // param isn't stream. directly write in buffer\n        //********************************************\n        this.encoder.writeParam(out, value, this.opts, info);\n      }\n    }\n  }\n}\nmodule.exports = Query;","map":{"version":3,"names":["Parser","require","Errors","Parse","TextEncoder","QUOTE","Query","constructor","resolve","reject","connOpts","cmdParam","encoder","opts","binary","start","out","info","logger","query","logParam","displaySql","sql","onPacketReceive","readResponsePacket","initialValues","undefined","startPacket","writeInt8","handleTimeout","writeString","flush","emit","encodedSql","encodeString","namedPlaceholders","parsed","splitQueryPlaceholder","bind","paramPositions","values","err","throwError","splitQuery","Array","isArray","validateParameters","paramPos","sqlPos","len","length","valueIdx","writeBuffer","value","pipe","read","sending","paramWritten","on","writeBufferEscape","writeParam","timeout","isMariaDB","hasMinVersion","createError","ER_TIMEOUT_NOT_SUPPORTED","throwNewError","ER_MISSING_PARAMETER","i","ER_PARAMETER_UNDEFINED","#paramWritten","writeStringAscii","once","module","exports"],"sources":["/home/warameur/Documents/velocity-data-viz/node_modules/mariadb/lib/cmd/query.js"],"sourcesContent":["'use strict';\n\nconst Parser = require('./parser');\nconst Errors = require('../misc/errors');\nconst Parse = require('../misc/parse');\nconst TextEncoder = require('./encoder/text-encoder');\n\nconst QUOTE = 0x27;\n\n/**\n * Protocol COM_QUERY\n * see : https://mariadb.com/kb/en/library/com_query/\n */\nclass Query extends Parser {\n  constructor(resolve, reject, connOpts, cmdParam) {\n    super(resolve, reject, connOpts, cmdParam);\n    this.encoder = new TextEncoder(this.opts);\n    this.binary = false;\n  }\n\n  /**\n   * Send COM_QUERY\n   *\n   * @param out   output writer\n   * @param opts  connection options\n   * @param info  connection information\n   */\n  start(out, opts, info) {\n    if (opts.logger.query) opts.logger.query(`QUERY: ${opts.logger.logParam ? this.displaySql() : this.sql}`);\n    this.onPacketReceive = this.readResponsePacket;\n    if (this.initialValues === undefined) {\n      //shortcut if no parameters\n      out.startPacket(this);\n      out.writeInt8(0x03);\n      if (!this.handleTimeout(out, info)) return;\n      out.writeString(this.sql);\n      out.flush();\n      this.emit('send_end');\n      return;\n    }\n\n    this.encodedSql = out.encodeString(this.sql);\n\n    if (this.opts.namedPlaceholders) {\n      try {\n        const parsed = Parse.splitQueryPlaceholder(\n          this.encodedSql,\n          info,\n          this.initialValues,\n          this.displaySql.bind(this)\n        );\n        this.paramPositions = parsed.paramPositions;\n        this.values = parsed.values;\n      } catch (err) {\n        this.emit('send_end');\n        return this.throwError(err, info);\n      }\n    } else {\n      this.paramPositions = Parse.splitQuery(this.encodedSql);\n      this.values = Array.isArray(this.initialValues) ? this.initialValues : [this.initialValues];\n      if (!this.validateParameters(info)) return;\n    }\n\n    out.startPacket(this);\n    out.writeInt8(0x03);\n    if (!this.handleTimeout(out, info)) return;\n\n    this.paramPos = 0;\n    this.sqlPos = 0;\n\n    //********************************************\n    // send params\n    //********************************************\n    const len = this.paramPositions.length / 2;\n    for (this.valueIdx = 0; this.valueIdx < len; ) {\n      out.writeBuffer(this.encodedSql, this.sqlPos, this.paramPositions[this.paramPos++] - this.sqlPos);\n      this.sqlPos = this.paramPositions[this.paramPos++];\n\n      const value = this.values[this.valueIdx++];\n\n      if (\n        value !== null &&\n        typeof value === 'object' &&\n        typeof value.pipe === 'function' &&\n        typeof value.read === 'function'\n      ) {\n        this.sending = true;\n        //********************************************\n        // param is stream,\n        // now all params will be written by event\n        //********************************************\n        this.paramWritten = this.#paramWritten.bind(this, out, info);\n        out.writeInt8(QUOTE); //'\n        value.on('data', out.writeBufferEscape.bind(out));\n\n        value.on(\n          'end',\n          function () {\n            out.writeInt8(QUOTE); //'\n            this.paramWritten();\n          }.bind(this)\n        );\n\n        return;\n      } else {\n        //********************************************\n        // param isn't stream. directly write in buffer\n        //********************************************\n        this.encoder.writeParam(out, value, this.opts, info);\n      }\n    }\n    out.writeBuffer(this.encodedSql, this.sqlPos, this.encodedSql.length - this.sqlPos);\n    out.flush();\n    this.emit('send_end');\n  }\n\n  /**\n   * If timeout is set, prepend query with SET STATEMENT max_statement_time=xx FOR, or throw an error\n   * @param out buffer\n   * @param info server information\n   * @returns {boolean} false if an error has been thrown\n   */\n  handleTimeout(out, info) {\n    if (this.opts.timeout) {\n      if (info.isMariaDB()) {\n        if (info.hasMinVersion(10, 1, 2)) {\n          out.writeString(`SET STATEMENT max_statement_time=${this.opts.timeout / 1000} FOR `);\n          return true;\n        } else {\n          const err = Errors.createError(\n            `Cannot use timeout for MariaDB server before 10.1.2. timeout value: ${this.opts.timeout}`,\n            Errors.ER_TIMEOUT_NOT_SUPPORTED,\n            info,\n            'HY000',\n            this.sql\n          );\n          this.emit('send_end');\n          this.throwError(err, info);\n          return false;\n        }\n      } else {\n        //not available for MySQL\n        // max_execution time exist, but only for select, and as hint\n        const err = Errors.createError(\n          `Cannot use timeout for MySQL server. timeout value: ${this.opts.timeout}`,\n          Errors.ER_TIMEOUT_NOT_SUPPORTED,\n          info,\n          'HY000',\n          this.sql\n        );\n        this.emit('send_end');\n        this.throwError(err, info);\n        return false;\n      }\n    }\n    return true;\n  }\n\n  /**\n   * Validate that parameters exists and are defined.\n   *\n   * @param info        connection info\n   * @returns {boolean} return false if any error occur.\n   */\n  validateParameters(info) {\n    //validate parameter size.\n    if (this.paramPositions.length / 2 > this.values.length) {\n      this.emit('send_end');\n      this.throwNewError(\n        `Parameter at position ${this.values.length + 1} is not set`,\n        false,\n        info,\n        'HY000',\n        Errors.ER_MISSING_PARAMETER\n      );\n      return false;\n    }\n\n    //validate parameter is defined.\n    for (let i = 0; i < this.paramPositions.length / 2; i++) {\n      if (this.values[i] === undefined) {\n        this.emit('send_end');\n        this.throwNewError(\n          `Parameter at position ${i + 1} is undefined\\n${this.displaySql()}`,\n          false,\n          info,\n          'HY000',\n          Errors.ER_PARAMETER_UNDEFINED\n        );\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  #paramWritten(out, info) {\n    while (true) {\n      if (this.valueIdx === this.paramPositions.length / 2) {\n        //********************************************\n        // all parameters are written.\n        // flush packet\n        //********************************************\n        out.writeBuffer(this.encodedSql, this.sqlPos, this.encodedSql.length - this.sqlPos);\n        out.flush();\n        this.sending = false;\n        this.emit('send_end');\n        return;\n      } else {\n        const value = this.values[this.valueIdx++];\n        out.writeBuffer(this.encodedSql, this.sqlPos, this.paramPositions[this.paramPos++] - this.sqlPos);\n        this.sqlPos = this.paramPositions[this.paramPos++];\n\n        if (value === null) {\n          out.writeStringAscii('NULL');\n          continue;\n        }\n\n        if (typeof value === 'object' && typeof value.pipe === 'function' && typeof value.read === 'function') {\n          //********************************************\n          // param is stream,\n          //********************************************\n          out.writeInt8(QUOTE);\n          value.once(\n            'end',\n            function () {\n              out.writeInt8(QUOTE);\n              this.#paramWritten(out, info);\n            }.bind(this)\n          );\n          value.on('data', out.writeBufferEscape.bind(out));\n          return;\n        }\n\n        //********************************************\n        // param isn't stream. directly write in buffer\n        //********************************************\n        this.encoder.writeParam(out, value, this.opts, info);\n      }\n    }\n  }\n}\n\nmodule.exports = Query;\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}