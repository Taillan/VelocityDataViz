{"ast":null,"code":"// noinspection JSBitwiseOperatorUsage\n\n'use strict';\n\nconst Iconv = require('iconv-lite');\nconst Capabilities = require('../const/capabilities');\nconst Ed25519PasswordAuth = require('./handshake/auth/ed25519-password-auth');\nconst NativePasswordAuth = require('./handshake/auth/native-password-auth');\nconst Collations = require('../const/collations');\nconst Handshake = require('./handshake/handshake');\n\n/**\n * send a COM_CHANGE_USER: resets the connection and re-authenticates with the given credentials\n * see https://mariadb.com/kb/en/library/com_change_user/\n */\nclass ChangeUser extends Handshake {\n  constructor(cmdParam, connOpts, resolve, reject, addCommand) {\n    super(cmdParam, resolve, reject, () => {}, addCommand);\n    this.configAssign(connOpts, cmdParam.opts);\n  }\n  start(out, opts, info) {\n    if (opts.logger.query) opts.logger.query(`CHANGE USER to '${this.opts.user || ''}'`);\n    let authToken;\n    const pwd = Array.isArray(this.opts.password) ? this.opts.password[0] : this.opts.password;\n    switch (info.defaultPluginName) {\n      case 'mysql_native_password':\n      case '':\n        authToken = NativePasswordAuth.encryptSha1Password(pwd, info.seed);\n        break;\n      case 'client_ed25519':\n        authToken = Ed25519PasswordAuth.encryptPassword(pwd, info.seed);\n        break;\n      default:\n        authToken = Buffer.alloc(0);\n        break;\n    }\n    out.startPacket(this);\n    out.writeInt8(0x11);\n    out.writeString(this.opts.user || '');\n    out.writeInt8(0);\n    if (info.serverCapabilities & Capabilities.SECURE_CONNECTION) {\n      out.writeInt8(authToken.length);\n      out.writeBuffer(authToken, 0, authToken.length);\n    } else {\n      out.writeBuffer(authToken, 0, authToken.length);\n      out.writeInt8(0);\n    }\n    if (info.clientCapabilities & Capabilities.CONNECT_WITH_DB) {\n      out.writeString(this.opts.database);\n      out.writeInt8(0);\n      info.database = this.opts.database;\n    }\n    // handle default collation.\n    if (this.opts.collation) {\n      // collation has been set using charset.\n      // If server use same charset, use server collation.\n      if (!this.opts.charset || info.collation.charset !== this.opts.collation.charset) {\n        info.collation = this.opts.collation;\n      }\n    } else {\n      // if not utf8mb4 and no configuration, force to use UTF8MB4_UNICODE_CI\n      if (info.collation.charset !== 'utf8' || info.collation.maxLength === 3) {\n        info.collation = Collations.fromIndex(224);\n      }\n    }\n    out.writeInt16(info.collation.index);\n    if (info.clientCapabilities & Capabilities.PLUGIN_AUTH) {\n      out.writeString(info.defaultPluginName);\n      out.writeInt8(0);\n    }\n    if (info.clientCapabilities & Capabilities.CONNECT_ATTRS) {\n      out.writeInt8(0xfc);\n      let initPos = out.pos; //save position, assuming connection attributes length will be less than 2 bytes length\n      out.writeInt16(0);\n      const encoding = info.collation.charset;\n      writeParam(out, '_client_name', encoding);\n      writeParam(out, 'MariaDB connector/Node', encoding);\n      let packageJson = require('../../package.json');\n      writeParam(out, '_client_version', encoding);\n      writeParam(out, packageJson.version, encoding);\n      writeParam(out, '_node_version', encoding);\n      writeParam(out, process.versions.node, encoding);\n      if (opts.connectAttributes !== true) {\n        let attrNames = Object.keys(this.opts.connectAttributes);\n        for (let k = 0; k < attrNames.length; ++k) {\n          writeParam(out, attrNames[k], encoding);\n          writeParam(out, this.opts.connectAttributes[attrNames[k]], encoding);\n        }\n      }\n\n      //write end size\n      out.writeInt16AtPos(initPos);\n    }\n    out.flush();\n    this.onPacketReceive = this.handshakeResult;\n  }\n\n  /**\n   * Assign global configuration option used by result-set to current query option.\n   * a little faster than Object.assign() since doest copy all information\n   *\n   * @param connOpts  connection global configuration\n   * @param cmdOpts   current options\n   */\n  configAssign(connOpts, cmdOpts) {\n    if (!cmdOpts) {\n      this.opts = connOpts;\n      return;\n    }\n    this.opts = cmdOpts ? Object.assign({}, connOpts, cmdOpts) : connOpts;\n    if (cmdOpts.charset && typeof cmdOpts.charset === 'string') {\n      this.opts.collation = Collations.fromCharset(cmdOpts.charset.toLowerCase());\n      if (this.opts.collation === undefined) {\n        this.opts.collation = Collations.fromName(cmdOpts.charset.toUpperCase());\n        if (this.opts.collation !== undefined) {\n          console.log(\"warning: please use option 'collation' \" + \"in replacement of 'charset' when using a collation name ('\" + cmdOpts.charset + \"')\\n\" + \"(collation looks like 'UTF8MB4_UNICODE_CI', charset like 'utf8').\");\n        }\n      }\n      if (this.opts.collation === undefined) throw new RangeError(\"Unknown charset '\" + cmdOpts.charset + \"'\");\n    } else if (cmdOpts.collation && typeof cmdOpts.collation === 'string') {\n      const initial = cmdOpts.collation;\n      this.opts.collation = Collations.fromName(initial.toUpperCase());\n      if (this.opts.collation === undefined) throw new RangeError(\"Unknown collation '\" + initial + \"'\");\n    } else {\n      this.opts.collation = Collations.fromIndex(cmdOpts.charsetNumber) || connOpts.collation;\n    }\n    connOpts.password = cmdOpts.password;\n  }\n}\nfunction writeParam(out, val, encoding) {\n  let param = Buffer.isEncoding(encoding) ? Buffer.from(val, encoding) : Iconv.encode(val, encoding);\n  out.writeLengthCoded(param.length);\n  out.writeBuffer(param, 0, param.length);\n}\nmodule.exports = ChangeUser;","map":{"version":3,"names":["Iconv","require","Capabilities","Ed25519PasswordAuth","NativePasswordAuth","Collations","Handshake","ChangeUser","constructor","cmdParam","connOpts","resolve","reject","addCommand","configAssign","opts","start","out","info","logger","query","user","authToken","pwd","Array","isArray","password","defaultPluginName","encryptSha1Password","seed","encryptPassword","Buffer","alloc","startPacket","writeInt8","writeString","serverCapabilities","SECURE_CONNECTION","length","writeBuffer","clientCapabilities","CONNECT_WITH_DB","database","collation","charset","maxLength","fromIndex","writeInt16","index","PLUGIN_AUTH","CONNECT_ATTRS","initPos","pos","encoding","writeParam","packageJson","version","process","versions","node","connectAttributes","attrNames","Object","keys","k","writeInt16AtPos","flush","onPacketReceive","handshakeResult","cmdOpts","assign","fromCharset","toLowerCase","undefined","fromName","toUpperCase","console","log","RangeError","initial","charsetNumber","val","param","isEncoding","from","encode","writeLengthCoded","module","exports"],"sources":["/home/warameur/Documents/velocity-data-viz/node_modules/mariadb/lib/cmd/change-user.js"],"sourcesContent":["// noinspection JSBitwiseOperatorUsage\n\n'use strict';\n\nconst Iconv = require('iconv-lite');\nconst Capabilities = require('../const/capabilities');\nconst Ed25519PasswordAuth = require('./handshake/auth/ed25519-password-auth');\nconst NativePasswordAuth = require('./handshake/auth/native-password-auth');\nconst Collations = require('../const/collations');\nconst Handshake = require('./handshake/handshake');\n\n/**\n * send a COM_CHANGE_USER: resets the connection and re-authenticates with the given credentials\n * see https://mariadb.com/kb/en/library/com_change_user/\n */\nclass ChangeUser extends Handshake {\n  constructor(cmdParam, connOpts, resolve, reject, addCommand) {\n    super(cmdParam, resolve, reject, () => {}, addCommand);\n    this.configAssign(connOpts, cmdParam.opts);\n  }\n\n  start(out, opts, info) {\n    if (opts.logger.query) opts.logger.query(`CHANGE USER to '${this.opts.user || ''}'`);\n    let authToken;\n    const pwd = Array.isArray(this.opts.password) ? this.opts.password[0] : this.opts.password;\n    switch (info.defaultPluginName) {\n      case 'mysql_native_password':\n      case '':\n        authToken = NativePasswordAuth.encryptSha1Password(pwd, info.seed);\n        break;\n      case 'client_ed25519':\n        authToken = Ed25519PasswordAuth.encryptPassword(pwd, info.seed);\n        break;\n      default:\n        authToken = Buffer.alloc(0);\n        break;\n    }\n\n    out.startPacket(this);\n    out.writeInt8(0x11);\n    out.writeString(this.opts.user || '');\n    out.writeInt8(0);\n\n    if (info.serverCapabilities & Capabilities.SECURE_CONNECTION) {\n      out.writeInt8(authToken.length);\n      out.writeBuffer(authToken, 0, authToken.length);\n    } else {\n      out.writeBuffer(authToken, 0, authToken.length);\n      out.writeInt8(0);\n    }\n\n    if (info.clientCapabilities & Capabilities.CONNECT_WITH_DB) {\n      out.writeString(this.opts.database);\n      out.writeInt8(0);\n      info.database = this.opts.database;\n    }\n    // handle default collation.\n    if (this.opts.collation) {\n      // collation has been set using charset.\n      // If server use same charset, use server collation.\n      if (!this.opts.charset || info.collation.charset !== this.opts.collation.charset) {\n        info.collation = this.opts.collation;\n      }\n    } else {\n      // if not utf8mb4 and no configuration, force to use UTF8MB4_UNICODE_CI\n      if (info.collation.charset !== 'utf8' || info.collation.maxLength === 3) {\n        info.collation = Collations.fromIndex(224);\n      }\n    }\n    out.writeInt16(info.collation.index);\n\n    if (info.clientCapabilities & Capabilities.PLUGIN_AUTH) {\n      out.writeString(info.defaultPluginName);\n      out.writeInt8(0);\n    }\n\n    if (info.clientCapabilities & Capabilities.CONNECT_ATTRS) {\n      out.writeInt8(0xfc);\n      let initPos = out.pos; //save position, assuming connection attributes length will be less than 2 bytes length\n      out.writeInt16(0);\n\n      const encoding = info.collation.charset;\n\n      writeParam(out, '_client_name', encoding);\n      writeParam(out, 'MariaDB connector/Node', encoding);\n\n      let packageJson = require('../../package.json');\n      writeParam(out, '_client_version', encoding);\n      writeParam(out, packageJson.version, encoding);\n\n      writeParam(out, '_node_version', encoding);\n      writeParam(out, process.versions.node, encoding);\n\n      if (opts.connectAttributes !== true) {\n        let attrNames = Object.keys(this.opts.connectAttributes);\n        for (let k = 0; k < attrNames.length; ++k) {\n          writeParam(out, attrNames[k], encoding);\n          writeParam(out, this.opts.connectAttributes[attrNames[k]], encoding);\n        }\n      }\n\n      //write end size\n      out.writeInt16AtPos(initPos);\n    }\n\n    out.flush();\n    this.onPacketReceive = this.handshakeResult;\n  }\n\n  /**\n   * Assign global configuration option used by result-set to current query option.\n   * a little faster than Object.assign() since doest copy all information\n   *\n   * @param connOpts  connection global configuration\n   * @param cmdOpts   current options\n   */\n  configAssign(connOpts, cmdOpts) {\n    if (!cmdOpts) {\n      this.opts = connOpts;\n      return;\n    }\n    this.opts = cmdOpts ? Object.assign({}, connOpts, cmdOpts) : connOpts;\n\n    if (cmdOpts.charset && typeof cmdOpts.charset === 'string') {\n      this.opts.collation = Collations.fromCharset(cmdOpts.charset.toLowerCase());\n      if (this.opts.collation === undefined) {\n        this.opts.collation = Collations.fromName(cmdOpts.charset.toUpperCase());\n        if (this.opts.collation !== undefined) {\n          console.log(\n            \"warning: please use option 'collation' \" +\n              \"in replacement of 'charset' when using a collation name ('\" +\n              cmdOpts.charset +\n              \"')\\n\" +\n              \"(collation looks like 'UTF8MB4_UNICODE_CI', charset like 'utf8').\"\n          );\n        }\n      }\n      if (this.opts.collation === undefined) throw new RangeError(\"Unknown charset '\" + cmdOpts.charset + \"'\");\n    } else if (cmdOpts.collation && typeof cmdOpts.collation === 'string') {\n      const initial = cmdOpts.collation;\n      this.opts.collation = Collations.fromName(initial.toUpperCase());\n      if (this.opts.collation === undefined) throw new RangeError(\"Unknown collation '\" + initial + \"'\");\n    } else {\n      this.opts.collation = Collations.fromIndex(cmdOpts.charsetNumber) || connOpts.collation;\n    }\n    connOpts.password = cmdOpts.password;\n  }\n}\n\nfunction writeParam(out, val, encoding) {\n  let param = Buffer.isEncoding(encoding) ? Buffer.from(val, encoding) : Iconv.encode(val, encoding);\n  out.writeLengthCoded(param.length);\n  out.writeBuffer(param, 0, param.length);\n}\n\nmodule.exports = ChangeUser;\n"],"mappings":"AAAA;;AAEA,YAAY;;AAEZ,MAAMA,KAAK,GAAGC,OAAO,CAAC,YAAY,CAAC;AACnC,MAAMC,YAAY,GAAGD,OAAO,CAAC,uBAAuB,CAAC;AACrD,MAAME,mBAAmB,GAAGF,OAAO,CAAC,wCAAwC,CAAC;AAC7E,MAAMG,kBAAkB,GAAGH,OAAO,CAAC,uCAAuC,CAAC;AAC3E,MAAMI,UAAU,GAAGJ,OAAO,CAAC,qBAAqB,CAAC;AACjD,MAAMK,SAAS,GAAGL,OAAO,CAAC,uBAAuB,CAAC;;AAElD;AACA;AACA;AACA;AACA,MAAMM,UAAU,SAASD,SAAS,CAAC;EACjCE,WAAWA,CAACC,QAAQ,EAAEC,QAAQ,EAAEC,OAAO,EAAEC,MAAM,EAAEC,UAAU,EAAE;IAC3D,KAAK,CAACJ,QAAQ,EAAEE,OAAO,EAAEC,MAAM,EAAE,MAAM,CAAC,CAAC,EAAEC,UAAU,CAAC;IACtD,IAAI,CAACC,YAAY,CAACJ,QAAQ,EAAED,QAAQ,CAACM,IAAI,CAAC;EAC5C;EAEAC,KAAKA,CAACC,GAAG,EAAEF,IAAI,EAAEG,IAAI,EAAE;IACrB,IAAIH,IAAI,CAACI,MAAM,CAACC,KAAK,EAAEL,IAAI,CAACI,MAAM,CAACC,KAAK,CAAE,mBAAkB,IAAI,CAACL,IAAI,CAACM,IAAI,IAAI,EAAG,GAAE,CAAC;IACpF,IAAIC,SAAS;IACb,MAAMC,GAAG,GAAGC,KAAK,CAACC,OAAO,CAAC,IAAI,CAACV,IAAI,CAACW,QAAQ,CAAC,GAAG,IAAI,CAACX,IAAI,CAACW,QAAQ,CAAC,CAAC,CAAC,GAAG,IAAI,CAACX,IAAI,CAACW,QAAQ;IAC1F,QAAQR,IAAI,CAACS,iBAAiB;MAC5B,KAAK,uBAAuB;MAC5B,KAAK,EAAE;QACLL,SAAS,GAAGlB,kBAAkB,CAACwB,mBAAmB,CAACL,GAAG,EAAEL,IAAI,CAACW,IAAI,CAAC;QAClE;MACF,KAAK,gBAAgB;QACnBP,SAAS,GAAGnB,mBAAmB,CAAC2B,eAAe,CAACP,GAAG,EAAEL,IAAI,CAACW,IAAI,CAAC;QAC/D;MACF;QACEP,SAAS,GAAGS,MAAM,CAACC,KAAK,CAAC,CAAC,CAAC;QAC3B;IAAM;IAGVf,GAAG,CAACgB,WAAW,CAAC,IAAI,CAAC;IACrBhB,GAAG,CAACiB,SAAS,CAAC,IAAI,CAAC;IACnBjB,GAAG,CAACkB,WAAW,CAAC,IAAI,CAACpB,IAAI,CAACM,IAAI,IAAI,EAAE,CAAC;IACrCJ,GAAG,CAACiB,SAAS,CAAC,CAAC,CAAC;IAEhB,IAAIhB,IAAI,CAACkB,kBAAkB,GAAGlC,YAAY,CAACmC,iBAAiB,EAAE;MAC5DpB,GAAG,CAACiB,SAAS,CAACZ,SAAS,CAACgB,MAAM,CAAC;MAC/BrB,GAAG,CAACsB,WAAW,CAACjB,SAAS,EAAE,CAAC,EAAEA,SAAS,CAACgB,MAAM,CAAC;IACjD,CAAC,MAAM;MACLrB,GAAG,CAACsB,WAAW,CAACjB,SAAS,EAAE,CAAC,EAAEA,SAAS,CAACgB,MAAM,CAAC;MAC/CrB,GAAG,CAACiB,SAAS,CAAC,CAAC,CAAC;IAClB;IAEA,IAAIhB,IAAI,CAACsB,kBAAkB,GAAGtC,YAAY,CAACuC,eAAe,EAAE;MAC1DxB,GAAG,CAACkB,WAAW,CAAC,IAAI,CAACpB,IAAI,CAAC2B,QAAQ,CAAC;MACnCzB,GAAG,CAACiB,SAAS,CAAC,CAAC,CAAC;MAChBhB,IAAI,CAACwB,QAAQ,GAAG,IAAI,CAAC3B,IAAI,CAAC2B,QAAQ;IACpC;IACA;IACA,IAAI,IAAI,CAAC3B,IAAI,CAAC4B,SAAS,EAAE;MACvB;MACA;MACA,IAAI,CAAC,IAAI,CAAC5B,IAAI,CAAC6B,OAAO,IAAI1B,IAAI,CAACyB,SAAS,CAACC,OAAO,KAAK,IAAI,CAAC7B,IAAI,CAAC4B,SAAS,CAACC,OAAO,EAAE;QAChF1B,IAAI,CAACyB,SAAS,GAAG,IAAI,CAAC5B,IAAI,CAAC4B,SAAS;MACtC;IACF,CAAC,MAAM;MACL;MACA,IAAIzB,IAAI,CAACyB,SAAS,CAACC,OAAO,KAAK,MAAM,IAAI1B,IAAI,CAACyB,SAAS,CAACE,SAAS,KAAK,CAAC,EAAE;QACvE3B,IAAI,CAACyB,SAAS,GAAGtC,UAAU,CAACyC,SAAS,CAAC,GAAG,CAAC;MAC5C;IACF;IACA7B,GAAG,CAAC8B,UAAU,CAAC7B,IAAI,CAACyB,SAAS,CAACK,KAAK,CAAC;IAEpC,IAAI9B,IAAI,CAACsB,kBAAkB,GAAGtC,YAAY,CAAC+C,WAAW,EAAE;MACtDhC,GAAG,CAACkB,WAAW,CAACjB,IAAI,CAACS,iBAAiB,CAAC;MACvCV,GAAG,CAACiB,SAAS,CAAC,CAAC,CAAC;IAClB;IAEA,IAAIhB,IAAI,CAACsB,kBAAkB,GAAGtC,YAAY,CAACgD,aAAa,EAAE;MACxDjC,GAAG,CAACiB,SAAS,CAAC,IAAI,CAAC;MACnB,IAAIiB,OAAO,GAAGlC,GAAG,CAACmC,GAAG,CAAC,CAAC;MACvBnC,GAAG,CAAC8B,UAAU,CAAC,CAAC,CAAC;MAEjB,MAAMM,QAAQ,GAAGnC,IAAI,CAACyB,SAAS,CAACC,OAAO;MAEvCU,UAAU,CAACrC,GAAG,EAAE,cAAc,EAAEoC,QAAQ,CAAC;MACzCC,UAAU,CAACrC,GAAG,EAAE,wBAAwB,EAAEoC,QAAQ,CAAC;MAEnD,IAAIE,WAAW,GAAGtD,OAAO,CAAC,oBAAoB,CAAC;MAC/CqD,UAAU,CAACrC,GAAG,EAAE,iBAAiB,EAAEoC,QAAQ,CAAC;MAC5CC,UAAU,CAACrC,GAAG,EAAEsC,WAAW,CAACC,OAAO,EAAEH,QAAQ,CAAC;MAE9CC,UAAU,CAACrC,GAAG,EAAE,eAAe,EAAEoC,QAAQ,CAAC;MAC1CC,UAAU,CAACrC,GAAG,EAAEwC,OAAO,CAACC,QAAQ,CAACC,IAAI,EAAEN,QAAQ,CAAC;MAEhD,IAAItC,IAAI,CAAC6C,iBAAiB,KAAK,IAAI,EAAE;QACnC,IAAIC,SAAS,GAAGC,MAAM,CAACC,IAAI,CAAC,IAAI,CAAChD,IAAI,CAAC6C,iBAAiB,CAAC;QACxD,KAAK,IAAII,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGH,SAAS,CAACvB,MAAM,EAAE,EAAE0B,CAAC,EAAE;UACzCV,UAAU,CAACrC,GAAG,EAAE4C,SAAS,CAACG,CAAC,CAAC,EAAEX,QAAQ,CAAC;UACvCC,UAAU,CAACrC,GAAG,EAAE,IAAI,CAACF,IAAI,CAAC6C,iBAAiB,CAACC,SAAS,CAACG,CAAC,CAAC,CAAC,EAAEX,QAAQ,CAAC;QACtE;MACF;;MAEA;MACApC,GAAG,CAACgD,eAAe,CAACd,OAAO,CAAC;IAC9B;IAEAlC,GAAG,CAACiD,KAAK,EAAE;IACX,IAAI,CAACC,eAAe,GAAG,IAAI,CAACC,eAAe;EAC7C;;EAEA;AACF;AACA;AACA;AACA;AACA;AACA;EACEtD,YAAYA,CAACJ,QAAQ,EAAE2D,OAAO,EAAE;IAC9B,IAAI,CAACA,OAAO,EAAE;MACZ,IAAI,CAACtD,IAAI,GAAGL,QAAQ;MACpB;IACF;IACA,IAAI,CAACK,IAAI,GAAGsD,OAAO,GAAGP,MAAM,CAACQ,MAAM,CAAC,CAAC,CAAC,EAAE5D,QAAQ,EAAE2D,OAAO,CAAC,GAAG3D,QAAQ;IAErE,IAAI2D,OAAO,CAACzB,OAAO,IAAI,OAAOyB,OAAO,CAACzB,OAAO,KAAK,QAAQ,EAAE;MAC1D,IAAI,CAAC7B,IAAI,CAAC4B,SAAS,GAAGtC,UAAU,CAACkE,WAAW,CAACF,OAAO,CAACzB,OAAO,CAAC4B,WAAW,EAAE,CAAC;MAC3E,IAAI,IAAI,CAACzD,IAAI,CAAC4B,SAAS,KAAK8B,SAAS,EAAE;QACrC,IAAI,CAAC1D,IAAI,CAAC4B,SAAS,GAAGtC,UAAU,CAACqE,QAAQ,CAACL,OAAO,CAACzB,OAAO,CAAC+B,WAAW,EAAE,CAAC;QACxE,IAAI,IAAI,CAAC5D,IAAI,CAAC4B,SAAS,KAAK8B,SAAS,EAAE;UACrCG,OAAO,CAACC,GAAG,CACT,yCAAyC,GACvC,4DAA4D,GAC5DR,OAAO,CAACzB,OAAO,GACf,MAAM,GACN,mEAAmE,CACtE;QACH;MACF;MACA,IAAI,IAAI,CAAC7B,IAAI,CAAC4B,SAAS,KAAK8B,SAAS,EAAE,MAAM,IAAIK,UAAU,CAAC,mBAAmB,GAAGT,OAAO,CAACzB,OAAO,GAAG,GAAG,CAAC;IAC1G,CAAC,MAAM,IAAIyB,OAAO,CAAC1B,SAAS,IAAI,OAAO0B,OAAO,CAAC1B,SAAS,KAAK,QAAQ,EAAE;MACrE,MAAMoC,OAAO,GAAGV,OAAO,CAAC1B,SAAS;MACjC,IAAI,CAAC5B,IAAI,CAAC4B,SAAS,GAAGtC,UAAU,CAACqE,QAAQ,CAACK,OAAO,CAACJ,WAAW,EAAE,CAAC;MAChE,IAAI,IAAI,CAAC5D,IAAI,CAAC4B,SAAS,KAAK8B,SAAS,EAAE,MAAM,IAAIK,UAAU,CAAC,qBAAqB,GAAGC,OAAO,GAAG,GAAG,CAAC;IACpG,CAAC,MAAM;MACL,IAAI,CAAChE,IAAI,CAAC4B,SAAS,GAAGtC,UAAU,CAACyC,SAAS,CAACuB,OAAO,CAACW,aAAa,CAAC,IAAItE,QAAQ,CAACiC,SAAS;IACzF;IACAjC,QAAQ,CAACgB,QAAQ,GAAG2C,OAAO,CAAC3C,QAAQ;EACtC;AACF;AAEA,SAAS4B,UAAUA,CAACrC,GAAG,EAAEgE,GAAG,EAAE5B,QAAQ,EAAE;EACtC,IAAI6B,KAAK,GAAGnD,MAAM,CAACoD,UAAU,CAAC9B,QAAQ,CAAC,GAAGtB,MAAM,CAACqD,IAAI,CAACH,GAAG,EAAE5B,QAAQ,CAAC,GAAGrD,KAAK,CAACqF,MAAM,CAACJ,GAAG,EAAE5B,QAAQ,CAAC;EAClGpC,GAAG,CAACqE,gBAAgB,CAACJ,KAAK,CAAC5C,MAAM,CAAC;EAClCrB,GAAG,CAACsB,WAAW,CAAC2C,KAAK,EAAE,CAAC,EAAEA,KAAK,CAAC5C,MAAM,CAAC;AACzC;AAEAiD,MAAM,CAACC,OAAO,GAAGjF,UAAU"},"metadata":{},"sourceType":"script","externalDependencies":[]}