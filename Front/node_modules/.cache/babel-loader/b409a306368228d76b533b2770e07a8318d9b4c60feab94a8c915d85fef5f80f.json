{"ast":null,"code":"'use strict';\n\nconst {\n  EventEmitter\n} = require('events');\nconst Pool = require('./pool');\nconst Errors = require('./misc/errors');\nconst ConnectionCallback = require('./connection-callback');\nconst CommandParameter = require('./command-parameter');\nclass PoolCallback extends EventEmitter {\n  #pool;\n  constructor(options) {\n    super();\n    this.#pool = new Pool(options);\n    this.#pool.on('acquire', this.emit.bind(this, 'acquire'));\n    this.#pool.on('connection', this.emit.bind(this, 'connection'));\n    this.#pool.on('enqueue', this.emit.bind(this, 'enqueue'));\n    this.#pool.on('release', this.emit.bind(this, 'release'));\n    this.#pool.on('error', this.emit.bind(this, 'error'));\n  }\n  #noop = () => {};\n  get closed() {\n    return this.#pool.closed;\n  }\n\n  /**\n   * Get current total connection number.\n   * @return {number}\n   */\n  totalConnections() {\n    return this.#pool.totalConnections();\n  }\n\n  /**\n   * Get current active connections.\n   * @return {number}\n   */\n  activeConnections() {\n    return this.#pool.activeConnections();\n  }\n\n  /**\n   * Get current idle connection number.\n   * @return {number}\n   */\n  idleConnections() {\n    return this.#pool.idleConnections();\n  }\n\n  /**\n   * Get current stacked connection request.\n   * @return {number}\n   */\n  taskQueueSize() {\n    return this.#pool.taskQueueSize();\n  }\n  escape(value) {\n    return this.#pool.escape(value);\n  }\n  escapeId(value) {\n    return this.#pool.escapeId(value);\n  }\n\n  /**\n   * Ends pool\n   *\n   * @param callback\n   */\n  end(callback) {\n    this.#pool.end().then(() => {\n      if (callback) callback(null);\n    }).catch(callback || this.#noop);\n  }\n\n  /**\n   * Retrieve a connection from pool.\n   * Create a new one, if limit is not reached.\n   * wait until acquireTimeout.\n   *\n   * @param cb callback\n   */\n  getConnection(cb) {\n    if (!cb) {\n      throw new Errors.createError('missing mandatory callback parameter', Errors.ER_MISSING_PARAMETER);\n    }\n    const cmdParam = new CommandParameter();\n    if (this.#pool.opts.connOptions.trace) Error.captureStackTrace(cmdParam);\n    this.#pool.getConnection(cmdParam).then(baseConn => {\n      const cc = new ConnectionCallback(baseConn);\n      cc.end = cb => cc.release(cb);\n      cc.close = cb => cc.release(cb);\n      cb(null, cc);\n    }).catch(cb);\n  }\n\n  /**\n   * Execute query using text protocol with callback emit columns/data/end/error\n   * events to permit streaming big result-set\n   *\n   * @param sql     sql parameter Object can be used to supersede default option.\n   *                Object must then have sql property.\n   * @param values  object / array of placeholder values (not mandatory)\n   * @param cb      callback\n   */\n  query(sql, values, cb) {\n    const cmdParam = ConnectionCallback._PARAM(this.#pool.opts.connOptions, sql, values, cb);\n    this.#pool.getConnection(cmdParam).then(baseConn => {\n      const _cb = cmdParam.callback;\n      cmdParam.callback = (err, rows, meta) => {\n        this.#pool.release(baseConn);\n        if (_cb) _cb(err, rows, meta);\n      };\n      ConnectionCallback._QUERY_CMD(baseConn, cmdParam);\n    }).catch(err => {\n      if (cmdParam.callback) cmdParam.callback(err);\n    });\n  }\n\n  /**\n   * Execute query using binary protocol with callback emit columns/data/end/error\n   * events to permit streaming big result-set\n   *\n   * @param sql     sql parameter Object can be used to supersede default option.\n   *                Object must then have sql property.\n   * @param values  object / array of placeholder values (not mandatory)\n   * @param cb      callback\n   */\n  execute(sql, values, cb) {\n    const cmdParam = ConnectionCallback._PARAM(this.#pool.opts.connOptions, sql, values, cb);\n    this.#pool.getConnection(cmdParam).then(baseConn => {\n      const _cb = cmdParam.callback;\n      cmdParam.callback = (err, rows, meta) => {\n        this.#pool.release(baseConn);\n        if (_cb) _cb(err, rows, meta);\n      };\n      ConnectionCallback._EXECUTE_CMD(baseConn, cmdParam);\n    }).catch(err => {\n      if (cmdParam.callback) cmdParam.callback(err);\n    });\n  }\n\n  /**\n   * execute a batch\n   *\n   * @param sql     sql parameter Object can be used to supersede default option.\n   *                Object must then have sql property.\n   * @param values  array of placeholder values\n   * @param cb      callback\n   */\n  batch(sql, values, cb) {\n    const cmdParam = ConnectionCallback._PARAM(this.#pool.opts.connOptions, sql, values, cb);\n    this.#pool.getConnection(cmdParam).then(baseConn => {\n      const _cb = cmdParam.callback;\n      cmdParam.callback = (err, rows, meta) => {\n        this.#pool.release(baseConn);\n        if (_cb) _cb(err, rows, meta);\n      };\n      ConnectionCallback._BATCH_CMD(baseConn, cmdParam);\n    }).catch(err => {\n      if (cmdParam.callback) cmdParam.callback(err);\n    });\n  }\n}\nmodule.exports = PoolCallback;","map":{"version":3,"names":["EventEmitter","require","Pool","Errors","ConnectionCallback","CommandParameter","PoolCallback","pool","constructor","options","on","emit","bind","noop","#noop","closed","totalConnections","activeConnections","idleConnections","taskQueueSize","escape","value","escapeId","end","callback","then","catch","getConnection","cb","createError","ER_MISSING_PARAMETER","cmdParam","opts","connOptions","trace","Error","captureStackTrace","baseConn","cc","release","close","query","sql","values","_PARAM","_cb","err","rows","meta","_QUERY_CMD","execute","_EXECUTE_CMD","batch","_BATCH_CMD","module","exports"],"sources":["/home/warameur/Documents/velocity-data-viz/node_modules/mariadb/lib/pool-callback.js"],"sourcesContent":["'use strict';\n\nconst { EventEmitter } = require('events');\n\nconst Pool = require('./pool');\nconst Errors = require('./misc/errors');\nconst ConnectionCallback = require('./connection-callback');\nconst CommandParameter = require('./command-parameter');\n\nclass PoolCallback extends EventEmitter {\n  #pool;\n  constructor(options) {\n    super();\n    this.#pool = new Pool(options);\n    this.#pool.on('acquire', this.emit.bind(this, 'acquire'));\n    this.#pool.on('connection', this.emit.bind(this, 'connection'));\n    this.#pool.on('enqueue', this.emit.bind(this, 'enqueue'));\n    this.#pool.on('release', this.emit.bind(this, 'release'));\n    this.#pool.on('error', this.emit.bind(this, 'error'));\n  }\n\n  #noop = () => {};\n\n  get closed() {\n    return this.#pool.closed;\n  }\n\n  /**\n   * Get current total connection number.\n   * @return {number}\n   */\n  totalConnections() {\n    return this.#pool.totalConnections();\n  }\n\n  /**\n   * Get current active connections.\n   * @return {number}\n   */\n  activeConnections() {\n    return this.#pool.activeConnections();\n  }\n\n  /**\n   * Get current idle connection number.\n   * @return {number}\n   */\n  idleConnections() {\n    return this.#pool.idleConnections();\n  }\n\n  /**\n   * Get current stacked connection request.\n   * @return {number}\n   */\n  taskQueueSize() {\n    return this.#pool.taskQueueSize();\n  }\n\n  escape(value) {\n    return this.#pool.escape(value);\n  }\n\n  escapeId(value) {\n    return this.#pool.escapeId(value);\n  }\n\n  /**\n   * Ends pool\n   *\n   * @param callback\n   */\n  end(callback) {\n    this.#pool\n      .end()\n      .then(() => {\n        if (callback) callback(null);\n      })\n      .catch(callback || this.#noop);\n  }\n\n  /**\n   * Retrieve a connection from pool.\n   * Create a new one, if limit is not reached.\n   * wait until acquireTimeout.\n   *\n   * @param cb callback\n   */\n  getConnection(cb) {\n    if (!cb) {\n      throw new Errors.createError('missing mandatory callback parameter', Errors.ER_MISSING_PARAMETER);\n    }\n    const cmdParam = new CommandParameter();\n    if (this.#pool.opts.connOptions.trace) Error.captureStackTrace(cmdParam);\n    this.#pool\n      .getConnection(cmdParam)\n      .then((baseConn) => {\n        const cc = new ConnectionCallback(baseConn);\n        cc.end = (cb) => cc.release(cb);\n        cc.close = (cb) => cc.release(cb);\n        cb(null, cc);\n      })\n      .catch(cb);\n  }\n\n  /**\n   * Execute query using text protocol with callback emit columns/data/end/error\n   * events to permit streaming big result-set\n   *\n   * @param sql     sql parameter Object can be used to supersede default option.\n   *                Object must then have sql property.\n   * @param values  object / array of placeholder values (not mandatory)\n   * @param cb      callback\n   */\n  query(sql, values, cb) {\n    const cmdParam = ConnectionCallback._PARAM(this.#pool.opts.connOptions, sql, values, cb);\n    this.#pool\n      .getConnection(cmdParam)\n      .then((baseConn) => {\n        const _cb = cmdParam.callback;\n        cmdParam.callback = (err, rows, meta) => {\n          this.#pool.release(baseConn);\n          if (_cb) _cb(err, rows, meta);\n        };\n        ConnectionCallback._QUERY_CMD(baseConn, cmdParam);\n      })\n      .catch((err) => {\n        if (cmdParam.callback) cmdParam.callback(err);\n      });\n  }\n\n  /**\n   * Execute query using binary protocol with callback emit columns/data/end/error\n   * events to permit streaming big result-set\n   *\n   * @param sql     sql parameter Object can be used to supersede default option.\n   *                Object must then have sql property.\n   * @param values  object / array of placeholder values (not mandatory)\n   * @param cb      callback\n   */\n  execute(sql, values, cb) {\n    const cmdParam = ConnectionCallback._PARAM(this.#pool.opts.connOptions, sql, values, cb);\n\n    this.#pool\n      .getConnection(cmdParam)\n      .then((baseConn) => {\n        const _cb = cmdParam.callback;\n        cmdParam.callback = (err, rows, meta) => {\n          this.#pool.release(baseConn);\n          if (_cb) _cb(err, rows, meta);\n        };\n        ConnectionCallback._EXECUTE_CMD(baseConn, cmdParam);\n      })\n      .catch((err) => {\n        if (cmdParam.callback) cmdParam.callback(err);\n      });\n  }\n\n  /**\n   * execute a batch\n   *\n   * @param sql     sql parameter Object can be used to supersede default option.\n   *                Object must then have sql property.\n   * @param values  array of placeholder values\n   * @param cb      callback\n   */\n  batch(sql, values, cb) {\n    const cmdParam = ConnectionCallback._PARAM(this.#pool.opts.connOptions, sql, values, cb);\n    this.#pool\n      .getConnection(cmdParam)\n      .then((baseConn) => {\n        const _cb = cmdParam.callback;\n        cmdParam.callback = (err, rows, meta) => {\n          this.#pool.release(baseConn);\n          if (_cb) _cb(err, rows, meta);\n        };\n        ConnectionCallback._BATCH_CMD(baseConn, cmdParam);\n      })\n      .catch((err) => {\n        if (cmdParam.callback) cmdParam.callback(err);\n      });\n  }\n}\n\nmodule.exports = PoolCallback;\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}