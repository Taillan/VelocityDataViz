{"ast":null,"code":"'use strict';\n\nconst Errors = require('./misc/errors');\nconst {\n  Status\n} = require('./const/connection_status');\nconst Query = require('./cmd/query');\nconst CommandParameter = require('./command-parameter');\nclass ConnectionCallback {\n  #conn;\n  constructor(conn) {\n    this.#conn = conn;\n    this.on = this.#conn.on.bind(this.#conn);\n    this.once = this.#conn.once.bind(this.#conn);\n  }\n  get threadId() {\n    return this.#conn.info ? this.#conn.info.threadId : null;\n  }\n  get info() {\n    return this.#conn.info;\n  }\n  #noop = () => {};\n  release = cb => {\n    this.#conn.release(() => {\n      if (cb) cb();\n    });\n  };\n\n  /**\n   * Permit to change user during connection.\n   * All user variables will be reset, Prepare commands will be released.\n   * !!! mysql has a bug when CONNECT_ATTRS capability is set, that is default !!!!\n   *\n   * @param options   connection options\n   * @param callback  callback function\n   */\n  changeUser(options, callback) {\n    let _options, _cb;\n    if (typeof options === 'function') {\n      _cb = options;\n      _options = undefined;\n    } else {\n      _options = options;\n      _cb = callback;\n    }\n    const cmdParam = new CommandParameter(null, null, _options, _cb);\n    if (this.#conn.opts.trace) Error.captureStackTrace(cmdParam);\n    new Promise(this.#conn.changeUser.bind(this.#conn, cmdParam)).then(() => {\n      if (cmdParam.callback) cmdParam.callback(null, null, null);\n    }).catch(cmdParam.callback || this.#noop);\n  }\n\n  /**\n   * Start transaction\n   *\n   * @param callback  callback function\n   */\n  beginTransaction(callback) {\n    this.query(new CommandParameter('START TRANSACTION'), null, callback);\n  }\n\n  /**\n   * Commit a transaction.\n   *\n   * @param callback  callback function\n   */\n  commit(callback) {\n    this.#conn.changeTransaction(new CommandParameter('COMMIT'), () => {\n      if (callback) callback(null, null, null);\n    }, callback || this.#noop);\n  }\n\n  /**\n   * Roll back a transaction.\n   *\n   * @param callback  callback function\n   */\n  rollback(callback) {\n    this.#conn.changeTransaction(new CommandParameter('ROLLBACK'), () => {\n      if (callback) callback(null, null, null);\n    }, callback || this.#noop);\n  }\n\n  /**\n   * Execute query using text protocol with callback emit columns/data/end/error\n   * events to permit streaming big result-set\n   *\n   * @param sql     sql parameter Object can be used to supersede default option.\n   *                Object must then have sql property.\n   * @param values  object / array of placeholder values (not mandatory)\n   * @param callback  callback function\n   */\n  query(sql, values, callback) {\n    const cmdParam = ConnectionCallback._PARAM(this.#conn.opts, sql, values, callback);\n    return ConnectionCallback._QUERY_CMD(this.#conn, cmdParam);\n  }\n  static _QUERY_CMD(conn, cmdParam) {\n    let cmd;\n    if (cmdParam.callback) {\n      cmdParam.opts = cmdParam.opts ? Object.assign(cmdParam.opts, {\n        metaAsArray: true\n      }) : {\n        metaAsArray: true\n      };\n      cmd = new Query(_ref => {\n        let [rows, meta] = _ref;\n        cmdParam.callback(null, rows, meta);\n      }, cmdParam.callback, conn.opts, cmdParam);\n    } else {\n      cmd = new Query(() => {}, () => {}, conn.opts, cmdParam);\n    }\n    cmd.handleNewRows = row => {\n      cmd._rows[cmd._responseIndex].push(row);\n      cmd.emit('data', row);\n    };\n    conn.addCommand(cmd);\n    return cmd;\n  }\n  execute(sql, values, callback) {\n    const cmdParam = ConnectionCallback._PARAM(this.#conn.opts, sql, values, callback);\n    return ConnectionCallback._EXECUTE_CMD(this.#conn, cmdParam);\n  }\n  static _PARAM(options, sql, values, callback) {\n    let _cmdOpt,\n      _sql,\n      _values = values,\n      _cb = callback;\n    if (typeof values === 'function') {\n      _cb = values;\n      _values = undefined;\n    }\n    if (typeof sql === 'object') {\n      _cmdOpt = sql;\n      _sql = _cmdOpt.sql;\n      if (_cmdOpt.values) _values = _cmdOpt.values;\n    } else {\n      _sql = sql;\n    }\n    const cmdParam = new CommandParameter(_sql, _values, _cmdOpt, _cb);\n    if (options.trace) Error.captureStackTrace(cmdParam);\n    return cmdParam;\n  }\n  static _EXECUTE_CMD(conn, cmdParam) {\n    new Promise(conn.prepare.bind(conn, cmdParam)).then(prepare => {\n      const opts = cmdParam.opts ? Object.assign(cmdParam.opts, {\n        metaAsArray: true\n      }) : {\n        metaAsArray: true\n      };\n      return prepare.execute(cmdParam.values, opts, null, cmdParam.stack).then(_ref2 => {\n        let [rows, meta] = _ref2;\n        if (cmdParam.callback) {\n          cmdParam.callback(null, rows, meta);\n        }\n      }).finally(() => prepare.close());\n    }).catch(err => {\n      if (conn.opts.logger.error) conn.opts.logger.error(err);\n      if (cmdParam.callback) cmdParam.callback(err);\n    });\n  }\n  prepare(sql, callback) {\n    let _cmdOpt, _sql;\n    if (typeof sql === 'object') {\n      _cmdOpt = sql;\n      _sql = _cmdOpt.sql;\n    } else {\n      _sql = sql;\n    }\n    const cmdParam = new CommandParameter(_sql, null, _cmdOpt, callback);\n    if (this.#conn.opts.trace) Error.captureStackTrace(cmdParam);\n    return new Promise(this.#conn.prepare.bind(this.#conn, cmdParam)).then(prepare => {\n      if (callback) callback(null, prepare, null);\n    }).catch(callback || this.#noop);\n  }\n\n  /**\n   * Execute a batch\n   * events to permit streaming big result-set\n   *\n   * @param sql     sql parameter Object can be used to supersede default option.\n   *                Object must then have sql property.\n   * @param values  object / array of placeholder values (not mandatory)\n   * @param callback callback\n   */\n  batch(sql, values, callback) {\n    const cmdParam = ConnectionCallback._PARAM(this.#conn.opts, sql, values, callback);\n    return ConnectionCallback._BATCH_CMD(this.#conn, cmdParam);\n  }\n  static _BATCH_CMD(conn, cmdParam) {\n    conn.batch(cmdParam).then(res => {\n      if (cmdParam.callback) cmdParam.callback(null, res);\n    }).catch(err => {\n      if (cmdParam.callback) cmdParam.callback(err);\n    });\n  }\n\n  /**\n   * Send an empty MySQL packet to ensure connection is active, and reset @@wait_timeout\n   * @param timeout (optional) timeout value in ms. If reached, throw error and close connection\n   * @param callback callback\n   */\n  ping(timeout, callback) {\n    let _cmdOpt = {},\n      _cb;\n    if (typeof timeout === 'function') {\n      _cb = timeout;\n    } else {\n      _cmdOpt.timeout = timeout;\n      _cb = callback;\n    }\n    const cmdParam = new CommandParameter(null, null, _cmdOpt, _cb);\n    if (this.#conn.opts.trace) Error.captureStackTrace(cmdParam);\n    new Promise(this.#conn.ping.bind(this.#conn, cmdParam)).then(_cb || this.#noop).catch(_cb || this.#noop);\n  }\n\n  /**\n   * Send a reset command that will\n   * - rollback any open transaction\n   * - reset transaction isolation level\n   * - reset session variables\n   * - delete user variables\n   * - remove temporary tables\n   * - remove all PREPARE statement\n   *\n   * @param callback callback\n   */\n  reset(callback) {\n    const cmdParam = new CommandParameter();\n    if (this.#conn.opts.trace) Error.captureStackTrace(cmdParam);\n    return new Promise(this.#conn.reset.bind(this.#conn, cmdParam)).then(callback || this.#noop).catch(callback || this.#noop);\n  }\n\n  /**\n   * Indicates the state of the connection as the driver knows it\n   * @returns {boolean}\n   */\n  isValid() {\n    return this.#conn.isValid();\n  }\n\n  /**\n   * Terminate connection gracefully.\n   *\n   * @param callback callback\n   */\n  end(callback) {\n    const cmdParam = new CommandParameter();\n    if (this.#conn.opts.trace) Error.captureStackTrace(cmdParam);\n    new Promise(this.#conn.end.bind(this.#conn, cmdParam)).then(() => {\n      if (callback) callback();\n    }).catch(callback || this.#noop);\n  }\n\n  /**\n   * Alias for destroy.\n   */\n  close() {\n    this.destroy();\n  }\n\n  /**\n   * Force connection termination by closing the underlying socket and killing server process if any.\n   */\n  destroy() {\n    this.#conn.destroy();\n  }\n  pause() {\n    this.#conn.pause();\n  }\n  resume() {\n    this.#conn.resume();\n  }\n  format(sql, values) {\n    this.#conn.format(sql, values);\n  }\n\n  /**\n   * return current connected server version information.\n   *\n   * @returns {*}\n   */\n  serverVersion() {\n    return this.#conn.serverVersion();\n  }\n\n  /**\n   * Change option \"debug\" during connection.\n   * @param val   debug value\n   */\n  debug(val) {\n    return this.#conn.debug(val);\n  }\n  debugCompress(val) {\n    return this.#conn.debugCompress(val);\n  }\n  escape(val) {\n    return this.#conn.escape(val);\n  }\n  escapeId(val) {\n    return this.#conn.escapeId(val);\n  }\n\n  //*****************************************************************\n  // internal public testing methods\n  //*****************************************************************\n\n  get __tests() {\n    return this.#conn.__tests;\n  }\n  connect(callback) {\n    if (!callback) {\n      throw new Errors.createError('missing mandatory callback parameter', Errors.ER_MISSING_PARAMETER, this.#conn.info);\n    }\n    switch (this.#conn.status) {\n      case Status.NOT_CONNECTED:\n      case Status.CONNECTING:\n      case Status.AUTHENTICATING:\n      case Status.INIT_CMD:\n        this.once('connect', callback);\n        break;\n      case Status.CONNECTED:\n        callback.call(this);\n        break;\n      case Status.CLOSING:\n      case Status.CLOSED:\n        callback.call(this, Errors.createError('Connection closed', Errors.ER_CONNECTION_ALREADY_CLOSED, this.#conn.info, '08S01', null, true));\n        break;\n    }\n  }\n}\nmodule.exports = ConnectionCallback;","map":{"version":3,"names":["Errors","require","Status","Query","CommandParameter","ConnectionCallback","conn","constructor","on","bind","once","threadId","info","noop","#noop","release","cb","changeUser","options","callback","_options","_cb","undefined","cmdParam","opts","trace","Error","captureStackTrace","Promise","then","catch","beginTransaction","query","commit","changeTransaction","rollback","sql","values","_PARAM","_QUERY_CMD","cmd","Object","assign","metaAsArray","_ref","rows","meta","handleNewRows","row","_rows","_responseIndex","push","emit","addCommand","execute","_EXECUTE_CMD","_cmdOpt","_sql","_values","prepare","stack","_ref2","finally","close","err","logger","error","batch","_BATCH_CMD","res","ping","timeout","reset","isValid","end","destroy","pause","resume","format","serverVersion","debug","val","debugCompress","escape","escapeId","__tests","connect","createError","ER_MISSING_PARAMETER","status","NOT_CONNECTED","CONNECTING","AUTHENTICATING","INIT_CMD","CONNECTED","call","CLOSING","CLOSED","ER_CONNECTION_ALREADY_CLOSED","module","exports"],"sources":["/home/warameur/Documents/velocity-data-viz/node_modules/mariadb/lib/connection-callback.js"],"sourcesContent":["'use strict';\n\nconst Errors = require('./misc/errors');\nconst { Status } = require('./const/connection_status');\nconst Query = require('./cmd/query');\nconst CommandParameter = require('./command-parameter');\n\nclass ConnectionCallback {\n  #conn;\n\n  constructor(conn) {\n    this.#conn = conn;\n    this.on = this.#conn.on.bind(this.#conn);\n    this.once = this.#conn.once.bind(this.#conn);\n  }\n\n  get threadId() {\n    return this.#conn.info ? this.#conn.info.threadId : null;\n  }\n\n  get info() {\n    return this.#conn.info;\n  }\n\n  #noop = () => {};\n\n  release = (cb) => {\n    this.#conn.release(() => {\n      if (cb) cb();\n    });\n  };\n\n  /**\n   * Permit to change user during connection.\n   * All user variables will be reset, Prepare commands will be released.\n   * !!! mysql has a bug when CONNECT_ATTRS capability is set, that is default !!!!\n   *\n   * @param options   connection options\n   * @param callback  callback function\n   */\n  changeUser(options, callback) {\n    let _options, _cb;\n    if (typeof options === 'function') {\n      _cb = options;\n      _options = undefined;\n    } else {\n      _options = options;\n      _cb = callback;\n    }\n    const cmdParam = new CommandParameter(null, null, _options, _cb);\n    if (this.#conn.opts.trace) Error.captureStackTrace(cmdParam);\n\n    new Promise(this.#conn.changeUser.bind(this.#conn, cmdParam))\n      .then(() => {\n        if (cmdParam.callback) cmdParam.callback(null, null, null);\n      })\n      .catch(cmdParam.callback || this.#noop);\n  }\n\n  /**\n   * Start transaction\n   *\n   * @param callback  callback function\n   */\n  beginTransaction(callback) {\n    this.query(new CommandParameter('START TRANSACTION'), null, callback);\n  }\n\n  /**\n   * Commit a transaction.\n   *\n   * @param callback  callback function\n   */\n  commit(callback) {\n    this.#conn.changeTransaction(\n      new CommandParameter('COMMIT'),\n      () => {\n        if (callback) callback(null, null, null);\n      },\n      callback || this.#noop\n    );\n  }\n\n  /**\n   * Roll back a transaction.\n   *\n   * @param callback  callback function\n   */\n  rollback(callback) {\n    this.#conn.changeTransaction(\n      new CommandParameter('ROLLBACK'),\n      () => {\n        if (callback) callback(null, null, null);\n      },\n      callback || this.#noop\n    );\n  }\n\n  /**\n   * Execute query using text protocol with callback emit columns/data/end/error\n   * events to permit streaming big result-set\n   *\n   * @param sql     sql parameter Object can be used to supersede default option.\n   *                Object must then have sql property.\n   * @param values  object / array of placeholder values (not mandatory)\n   * @param callback  callback function\n   */\n  query(sql, values, callback) {\n    const cmdParam = ConnectionCallback._PARAM(this.#conn.opts, sql, values, callback);\n    return ConnectionCallback._QUERY_CMD(this.#conn, cmdParam);\n  }\n\n  static _QUERY_CMD(conn, cmdParam) {\n    let cmd;\n    if (cmdParam.callback) {\n      cmdParam.opts = cmdParam.opts ? Object.assign(cmdParam.opts, { metaAsArray: true }) : { metaAsArray: true };\n      cmd = new Query(\n        ([rows, meta]) => {\n          cmdParam.callback(null, rows, meta);\n        },\n        cmdParam.callback,\n        conn.opts,\n        cmdParam\n      );\n    } else {\n      cmd = new Query(\n        () => {},\n        () => {},\n        conn.opts,\n        cmdParam\n      );\n    }\n\n    cmd.handleNewRows = (row) => {\n      cmd._rows[cmd._responseIndex].push(row);\n      cmd.emit('data', row);\n    };\n\n    conn.addCommand(cmd);\n    return cmd;\n  }\n\n  execute(sql, values, callback) {\n    const cmdParam = ConnectionCallback._PARAM(this.#conn.opts, sql, values, callback);\n    return ConnectionCallback._EXECUTE_CMD(this.#conn, cmdParam);\n  }\n\n  static _PARAM(options, sql, values, callback) {\n    let _cmdOpt,\n      _sql,\n      _values = values,\n      _cb = callback;\n    if (typeof values === 'function') {\n      _cb = values;\n      _values = undefined;\n    }\n    if (typeof sql === 'object') {\n      _cmdOpt = sql;\n      _sql = _cmdOpt.sql;\n      if (_cmdOpt.values) _values = _cmdOpt.values;\n    } else {\n      _sql = sql;\n    }\n    const cmdParam = new CommandParameter(_sql, _values, _cmdOpt, _cb);\n    if (options.trace) Error.captureStackTrace(cmdParam);\n    return cmdParam;\n  }\n\n  static _EXECUTE_CMD(conn, cmdParam) {\n    new Promise(conn.prepare.bind(conn, cmdParam))\n      .then((prepare) => {\n        const opts = cmdParam.opts ? Object.assign(cmdParam.opts, { metaAsArray: true }) : { metaAsArray: true };\n        return prepare\n          .execute(cmdParam.values, opts, null, cmdParam.stack)\n          .then(([rows, meta]) => {\n            if (cmdParam.callback) {\n              cmdParam.callback(null, rows, meta);\n            }\n          })\n          .finally(() => prepare.close());\n      })\n      .catch((err) => {\n        if (conn.opts.logger.error) conn.opts.logger.error(err);\n        if (cmdParam.callback) cmdParam.callback(err);\n      });\n  }\n\n  prepare(sql, callback) {\n    let _cmdOpt, _sql;\n    if (typeof sql === 'object') {\n      _cmdOpt = sql;\n      _sql = _cmdOpt.sql;\n    } else {\n      _sql = sql;\n    }\n    const cmdParam = new CommandParameter(_sql, null, _cmdOpt, callback);\n    if (this.#conn.opts.trace) Error.captureStackTrace(cmdParam);\n    return new Promise(this.#conn.prepare.bind(this.#conn, cmdParam))\n      .then((prepare) => {\n        if (callback) callback(null, prepare, null);\n      })\n      .catch(callback || this.#noop);\n  }\n\n  /**\n   * Execute a batch\n   * events to permit streaming big result-set\n   *\n   * @param sql     sql parameter Object can be used to supersede default option.\n   *                Object must then have sql property.\n   * @param values  object / array of placeholder values (not mandatory)\n   * @param callback callback\n   */\n  batch(sql, values, callback) {\n    const cmdParam = ConnectionCallback._PARAM(this.#conn.opts, sql, values, callback);\n    return ConnectionCallback._BATCH_CMD(this.#conn, cmdParam);\n  }\n\n  static _BATCH_CMD(conn, cmdParam) {\n    conn\n      .batch(cmdParam)\n      .then((res) => {\n        if (cmdParam.callback) cmdParam.callback(null, res);\n      })\n      .catch((err) => {\n        if (cmdParam.callback) cmdParam.callback(err);\n      });\n  }\n\n  /**\n   * Send an empty MySQL packet to ensure connection is active, and reset @@wait_timeout\n   * @param timeout (optional) timeout value in ms. If reached, throw error and close connection\n   * @param callback callback\n   */\n  ping(timeout, callback) {\n    let _cmdOpt = {},\n      _cb;\n    if (typeof timeout === 'function') {\n      _cb = timeout;\n    } else {\n      _cmdOpt.timeout = timeout;\n      _cb = callback;\n    }\n    const cmdParam = new CommandParameter(null, null, _cmdOpt, _cb);\n    if (this.#conn.opts.trace) Error.captureStackTrace(cmdParam);\n    new Promise(this.#conn.ping.bind(this.#conn, cmdParam)).then(_cb || this.#noop).catch(_cb || this.#noop);\n  }\n\n  /**\n   * Send a reset command that will\n   * - rollback any open transaction\n   * - reset transaction isolation level\n   * - reset session variables\n   * - delete user variables\n   * - remove temporary tables\n   * - remove all PREPARE statement\n   *\n   * @param callback callback\n   */\n  reset(callback) {\n    const cmdParam = new CommandParameter();\n    if (this.#conn.opts.trace) Error.captureStackTrace(cmdParam);\n    return new Promise(this.#conn.reset.bind(this.#conn, cmdParam))\n      .then(callback || this.#noop)\n      .catch(callback || this.#noop);\n  }\n\n  /**\n   * Indicates the state of the connection as the driver knows it\n   * @returns {boolean}\n   */\n  isValid() {\n    return this.#conn.isValid();\n  }\n\n  /**\n   * Terminate connection gracefully.\n   *\n   * @param callback callback\n   */\n  end(callback) {\n    const cmdParam = new CommandParameter();\n    if (this.#conn.opts.trace) Error.captureStackTrace(cmdParam);\n    new Promise(this.#conn.end.bind(this.#conn, cmdParam))\n      .then(() => {\n        if (callback) callback();\n      })\n      .catch(callback || this.#noop);\n  }\n\n  /**\n   * Alias for destroy.\n   */\n  close() {\n    this.destroy();\n  }\n\n  /**\n   * Force connection termination by closing the underlying socket and killing server process if any.\n   */\n  destroy() {\n    this.#conn.destroy();\n  }\n\n  pause() {\n    this.#conn.pause();\n  }\n\n  resume() {\n    this.#conn.resume();\n  }\n\n  format(sql, values) {\n    this.#conn.format(sql, values);\n  }\n\n  /**\n   * return current connected server version information.\n   *\n   * @returns {*}\n   */\n  serverVersion() {\n    return this.#conn.serverVersion();\n  }\n\n  /**\n   * Change option \"debug\" during connection.\n   * @param val   debug value\n   */\n  debug(val) {\n    return this.#conn.debug(val);\n  }\n\n  debugCompress(val) {\n    return this.#conn.debugCompress(val);\n  }\n\n  escape(val) {\n    return this.#conn.escape(val);\n  }\n\n  escapeId(val) {\n    return this.#conn.escapeId(val);\n  }\n\n  //*****************************************************************\n  // internal public testing methods\n  //*****************************************************************\n\n  get __tests() {\n    return this.#conn.__tests;\n  }\n\n  connect(callback) {\n    if (!callback) {\n      throw new Errors.createError(\n        'missing mandatory callback parameter',\n        Errors.ER_MISSING_PARAMETER,\n        this.#conn.info\n      );\n    }\n    switch (this.#conn.status) {\n      case Status.NOT_CONNECTED:\n      case Status.CONNECTING:\n      case Status.AUTHENTICATING:\n      case Status.INIT_CMD:\n        this.once('connect', callback);\n        break;\n      case Status.CONNECTED:\n        callback.call(this);\n        break;\n      case Status.CLOSING:\n      case Status.CLOSED:\n        callback.call(\n          this,\n          Errors.createError(\n            'Connection closed',\n            Errors.ER_CONNECTION_ALREADY_CLOSED,\n            this.#conn.info,\n            '08S01',\n            null,\n            true\n          )\n        );\n        break;\n    }\n  }\n}\n\nmodule.exports = ConnectionCallback;\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}