{"ast":null,"code":"'use strict';\n\nconst Parser = require('./parser');\nconst Parse = require('../misc/parse');\nconst BinaryEncoder = require('./encoder/binary-encoder');\nconst PrepareCacheWrapper = require('./class/prepare-cache-wrapper');\nconst PrepareResult = require('./class/prepare-result-packet');\nconst ServerStatus = require('../const/server-status');\nconst Errors = require('../misc/errors');\nconst ColumnDefinition = require('./column-definition');\n\n/**\n * send a COM_STMT_PREPARE: permits sending a prepare packet\n * see https://mariadb.com/kb/en/com_stmt_prepare/\n */\nclass Prepare extends Parser {\n  constructor(resolve, reject, connOpts, cmdParam, conn) {\n    super(resolve, reject, connOpts, cmdParam);\n    this.encoder = new BinaryEncoder(this.opts);\n    this.binary = true;\n    this.conn = conn;\n  }\n\n  /**\n   * Send COM_STMT_PREPARE\n   *\n   * @param out   output writer\n   * @param opts  connection options\n   * @param info  connection information\n   */\n  start(out, opts, info) {\n    // check in cache if enabled\n    if (this.conn.prepareCache) {\n      let cachedPrepare = this.conn.prepareCache.get(this.sql);\n      if (cachedPrepare) {\n        this.emit('send_end');\n        return this.successEnd(cachedPrepare);\n      }\n    }\n    if (opts.logger.query) opts.logger.query(`PREPARE: ${this.sql}`);\n    this.onPacketReceive = this.readPrepareResultPacket;\n    if (this.opts.namedPlaceholders) {\n      const res = Parse.searchPlaceholder(this.sql);\n      this.sql = res.sql;\n      this.placeHolderIndex = res.placeHolderIndex;\n    }\n    out.startPacket(this);\n    out.writeInt8(0x16);\n    out.writeString(this.sql);\n    out.flush();\n    this.emit('send_end');\n  }\n  successPrepare(info, opts) {\n    let prepare = new PrepareResult(this.statementId, this.parameterCount, this._columns, info.database, this.sql, this.placeHolderIndex, this.conn);\n    if (this.conn.prepareCache) {\n      let cached = new PrepareCacheWrapper(prepare);\n      this.conn.prepareCache.set(this.sql, cached);\n      return this.successEnd(cached.incrementUse());\n    }\n    return this.successEnd(prepare);\n  }\n\n  /**\n   * Read COM_STMT_PREPARE response Packet.\n   * see https://mariadb.com/kb/en/library/com_stmt_prepare/#com_stmt_prepare-response\n   *\n   * @param packet    COM_STMT_PREPARE_OK packet\n   * @param opts      connection options\n   * @param info      connection information\n   * @param out       output writer\n   * @returns {*}     null or {Result.readResponsePacket} in case of multi-result-set\n   */\n  readPrepareResultPacket(packet, out, opts, info) {\n    switch (packet.peek()) {\n      //*********************************************************************************************************\n      //* PREPARE response\n      //*********************************************************************************************************\n      case 0x00:\n        packet.skip(1); //skip header\n        this.statementId = packet.readInt32();\n        this.columnNo = packet.readUInt16();\n        this.parameterCount = packet.readUInt16();\n        this._parameterNo = this.parameterCount;\n        this._columns = [];\n        if (this._parameterNo > 0) return this.onPacketReceive = this.skipPrepareParameterPacket;\n        if (this.columnNo > 0) return this.onPacketReceive = this.readPrepareColumnsPacket;\n        return this.successPrepare(info, opts);\n\n      //*********************************************************************************************************\n      //* ERROR response\n      //*********************************************************************************************************\n      case 0xff:\n        const err = packet.readError(info, this.displaySql(), this.stack);\n        //force in transaction status, since query will have created a transaction if autocommit is off\n        //goal is to avoid unnecessary COMMIT/ROLLBACK.\n        info.status |= ServerStatus.STATUS_IN_TRANS;\n        this.onPacketReceive = this.readResponsePacket;\n        return this.throwError(err, info);\n\n      //*********************************************************************************************************\n      //* Unexpected response\n      //*********************************************************************************************************\n      default:\n        info.status |= ServerStatus.STATUS_IN_TRANS;\n        this.onPacketReceive = this.readResponsePacket;\n        return this.throwError(Errors.ER_UNEXPECTED_PACKET, info);\n    }\n  }\n  readPrepareColumnsPacket(packet, out, opts, info) {\n    this.columnNo--;\n    this._columns.push(new ColumnDefinition(packet, info, opts.rowsAsArray));\n    if (this.columnNo === 0) {\n      if (info.eofDeprecated) {\n        return this.successPrepare(info, opts);\n      }\n      return this.onPacketReceive = this.skipEofPacket;\n    }\n  }\n  skipEofPacket(packet, out, opts, info) {\n    if (this.columnNo > 0) return this.onPacketReceive = this.readPrepareColumnsPacket;\n    return this.successPrepare(info, opts);\n  }\n  skipPrepareParameterPacket(packet, out, opts, info) {\n    this._parameterNo--;\n    if (this._parameterNo === 0) {\n      if (info.eofDeprecated) {\n        if (this.columnNo > 0) return this.onPacketReceive = this.readPrepareColumnsPacket;\n        return this.successPrepare(info, opts);\n      }\n      return this.onPacketReceive = this.skipEofPacket;\n    }\n  }\n\n  /**\n   * Display current SQL with parameters (truncated if too big)\n   *\n   * @returns {string}\n   */\n  displaySql() {\n    if (this.opts) {\n      if (this.sql.length > this.opts.debugLen) {\n        return this.sql.substring(0, this.opts.debugLen) + '...';\n      }\n    }\n    return this.sql;\n  }\n}\nmodule.exports = Prepare;","map":{"version":3,"names":["Parser","require","Parse","BinaryEncoder","PrepareCacheWrapper","PrepareResult","ServerStatus","Errors","ColumnDefinition","Prepare","constructor","resolve","reject","connOpts","cmdParam","conn","encoder","opts","binary","start","out","info","prepareCache","cachedPrepare","get","sql","emit","successEnd","logger","query","onPacketReceive","readPrepareResultPacket","namedPlaceholders","res","searchPlaceholder","placeHolderIndex","startPacket","writeInt8","writeString","flush","successPrepare","prepare","statementId","parameterCount","_columns","database","cached","set","incrementUse","packet","peek","skip","readInt32","columnNo","readUInt16","_parameterNo","skipPrepareParameterPacket","readPrepareColumnsPacket","err","readError","displaySql","stack","status","STATUS_IN_TRANS","readResponsePacket","throwError","ER_UNEXPECTED_PACKET","push","rowsAsArray","eofDeprecated","skipEofPacket","length","debugLen","substring","module","exports"],"sources":["/home/warameur/Documents/velocity-data-viz/node_modules/mariadb/lib/cmd/prepare.js"],"sourcesContent":["'use strict';\nconst Parser = require('./parser');\nconst Parse = require('../misc/parse');\nconst BinaryEncoder = require('./encoder/binary-encoder');\nconst PrepareCacheWrapper = require('./class/prepare-cache-wrapper');\nconst PrepareResult = require('./class/prepare-result-packet');\nconst ServerStatus = require('../const/server-status');\nconst Errors = require('../misc/errors');\nconst ColumnDefinition = require('./column-definition');\n\n/**\n * send a COM_STMT_PREPARE: permits sending a prepare packet\n * see https://mariadb.com/kb/en/com_stmt_prepare/\n */\nclass Prepare extends Parser {\n  constructor(resolve, reject, connOpts, cmdParam, conn) {\n    super(resolve, reject, connOpts, cmdParam);\n    this.encoder = new BinaryEncoder(this.opts);\n    this.binary = true;\n    this.conn = conn;\n  }\n\n  /**\n   * Send COM_STMT_PREPARE\n   *\n   * @param out   output writer\n   * @param opts  connection options\n   * @param info  connection information\n   */\n  start(out, opts, info) {\n    // check in cache if enabled\n    if (this.conn.prepareCache) {\n      let cachedPrepare = this.conn.prepareCache.get(this.sql);\n      if (cachedPrepare) {\n        this.emit('send_end');\n        return this.successEnd(cachedPrepare);\n      }\n    }\n    if (opts.logger.query) opts.logger.query(`PREPARE: ${this.sql}`);\n    this.onPacketReceive = this.readPrepareResultPacket;\n\n    if (this.opts.namedPlaceholders) {\n      const res = Parse.searchPlaceholder(this.sql);\n      this.sql = res.sql;\n      this.placeHolderIndex = res.placeHolderIndex;\n    }\n\n    out.startPacket(this);\n    out.writeInt8(0x16);\n    out.writeString(this.sql);\n    out.flush();\n    this.emit('send_end');\n  }\n\n  successPrepare(info, opts) {\n    let prepare = new PrepareResult(\n      this.statementId,\n      this.parameterCount,\n      this._columns,\n      info.database,\n      this.sql,\n      this.placeHolderIndex,\n      this.conn\n    );\n\n    if (this.conn.prepareCache) {\n      let cached = new PrepareCacheWrapper(prepare);\n      this.conn.prepareCache.set(this.sql, cached);\n      return this.successEnd(cached.incrementUse());\n    }\n    return this.successEnd(prepare);\n  }\n\n  /**\n   * Read COM_STMT_PREPARE response Packet.\n   * see https://mariadb.com/kb/en/library/com_stmt_prepare/#com_stmt_prepare-response\n   *\n   * @param packet    COM_STMT_PREPARE_OK packet\n   * @param opts      connection options\n   * @param info      connection information\n   * @param out       output writer\n   * @returns {*}     null or {Result.readResponsePacket} in case of multi-result-set\n   */\n  readPrepareResultPacket(packet, out, opts, info) {\n    switch (packet.peek()) {\n      //*********************************************************************************************************\n      //* PREPARE response\n      //*********************************************************************************************************\n      case 0x00:\n        packet.skip(1); //skip header\n        this.statementId = packet.readInt32();\n        this.columnNo = packet.readUInt16();\n        this.parameterCount = packet.readUInt16();\n        this._parameterNo = this.parameterCount;\n        this._columns = [];\n        if (this._parameterNo > 0) return (this.onPacketReceive = this.skipPrepareParameterPacket);\n        if (this.columnNo > 0) return (this.onPacketReceive = this.readPrepareColumnsPacket);\n        return this.successPrepare(info, opts);\n\n      //*********************************************************************************************************\n      //* ERROR response\n      //*********************************************************************************************************\n      case 0xff:\n        const err = packet.readError(info, this.displaySql(), this.stack);\n        //force in transaction status, since query will have created a transaction if autocommit is off\n        //goal is to avoid unnecessary COMMIT/ROLLBACK.\n        info.status |= ServerStatus.STATUS_IN_TRANS;\n        this.onPacketReceive = this.readResponsePacket;\n        return this.throwError(err, info);\n\n      //*********************************************************************************************************\n      //* Unexpected response\n      //*********************************************************************************************************\n      default:\n        info.status |= ServerStatus.STATUS_IN_TRANS;\n        this.onPacketReceive = this.readResponsePacket;\n        return this.throwError(Errors.ER_UNEXPECTED_PACKET, info);\n    }\n  }\n\n  readPrepareColumnsPacket(packet, out, opts, info) {\n    this.columnNo--;\n    this._columns.push(new ColumnDefinition(packet, info, opts.rowsAsArray));\n    if (this.columnNo === 0) {\n      if (info.eofDeprecated) {\n        return this.successPrepare(info, opts);\n      }\n      return (this.onPacketReceive = this.skipEofPacket);\n    }\n  }\n\n  skipEofPacket(packet, out, opts, info) {\n    if (this.columnNo > 0) return (this.onPacketReceive = this.readPrepareColumnsPacket);\n    return this.successPrepare(info, opts);\n  }\n\n  skipPrepareParameterPacket(packet, out, opts, info) {\n    this._parameterNo--;\n    if (this._parameterNo === 0) {\n      if (info.eofDeprecated) {\n        if (this.columnNo > 0) return (this.onPacketReceive = this.readPrepareColumnsPacket);\n        return this.successPrepare(info, opts);\n      }\n      return (this.onPacketReceive = this.skipEofPacket);\n    }\n  }\n\n  /**\n   * Display current SQL with parameters (truncated if too big)\n   *\n   * @returns {string}\n   */\n  displaySql() {\n    if (this.opts) {\n      if (this.sql.length > this.opts.debugLen) {\n        return this.sql.substring(0, this.opts.debugLen) + '...';\n      }\n    }\n    return this.sql;\n  }\n}\n\nmodule.exports = Prepare;\n"],"mappings":"AAAA,YAAY;;AACZ,MAAMA,MAAM,GAAGC,OAAO,CAAC,UAAU,CAAC;AAClC,MAAMC,KAAK,GAAGD,OAAO,CAAC,eAAe,CAAC;AACtC,MAAME,aAAa,GAAGF,OAAO,CAAC,0BAA0B,CAAC;AACzD,MAAMG,mBAAmB,GAAGH,OAAO,CAAC,+BAA+B,CAAC;AACpE,MAAMI,aAAa,GAAGJ,OAAO,CAAC,+BAA+B,CAAC;AAC9D,MAAMK,YAAY,GAAGL,OAAO,CAAC,wBAAwB,CAAC;AACtD,MAAMM,MAAM,GAAGN,OAAO,CAAC,gBAAgB,CAAC;AACxC,MAAMO,gBAAgB,GAAGP,OAAO,CAAC,qBAAqB,CAAC;;AAEvD;AACA;AACA;AACA;AACA,MAAMQ,OAAO,SAAST,MAAM,CAAC;EAC3BU,WAAWA,CAACC,OAAO,EAAEC,MAAM,EAAEC,QAAQ,EAAEC,QAAQ,EAAEC,IAAI,EAAE;IACrD,KAAK,CAACJ,OAAO,EAAEC,MAAM,EAAEC,QAAQ,EAAEC,QAAQ,CAAC;IAC1C,IAAI,CAACE,OAAO,GAAG,IAAIb,aAAa,CAAC,IAAI,CAACc,IAAI,CAAC;IAC3C,IAAI,CAACC,MAAM,GAAG,IAAI;IAClB,IAAI,CAACH,IAAI,GAAGA,IAAI;EAClB;;EAEA;AACF;AACA;AACA;AACA;AACA;AACA;EACEI,KAAKA,CAACC,GAAG,EAAEH,IAAI,EAAEI,IAAI,EAAE;IACrB;IACA,IAAI,IAAI,CAACN,IAAI,CAACO,YAAY,EAAE;MAC1B,IAAIC,aAAa,GAAG,IAAI,CAACR,IAAI,CAACO,YAAY,CAACE,GAAG,CAAC,IAAI,CAACC,GAAG,CAAC;MACxD,IAAIF,aAAa,EAAE;QACjB,IAAI,CAACG,IAAI,CAAC,UAAU,CAAC;QACrB,OAAO,IAAI,CAACC,UAAU,CAACJ,aAAa,CAAC;MACvC;IACF;IACA,IAAIN,IAAI,CAACW,MAAM,CAACC,KAAK,EAAEZ,IAAI,CAACW,MAAM,CAACC,KAAK,CAAE,YAAW,IAAI,CAACJ,GAAI,EAAC,CAAC;IAChE,IAAI,CAACK,eAAe,GAAG,IAAI,CAACC,uBAAuB;IAEnD,IAAI,IAAI,CAACd,IAAI,CAACe,iBAAiB,EAAE;MAC/B,MAAMC,GAAG,GAAG/B,KAAK,CAACgC,iBAAiB,CAAC,IAAI,CAACT,GAAG,CAAC;MAC7C,IAAI,CAACA,GAAG,GAAGQ,GAAG,CAACR,GAAG;MAClB,IAAI,CAACU,gBAAgB,GAAGF,GAAG,CAACE,gBAAgB;IAC9C;IAEAf,GAAG,CAACgB,WAAW,CAAC,IAAI,CAAC;IACrBhB,GAAG,CAACiB,SAAS,CAAC,IAAI,CAAC;IACnBjB,GAAG,CAACkB,WAAW,CAAC,IAAI,CAACb,GAAG,CAAC;IACzBL,GAAG,CAACmB,KAAK,EAAE;IACX,IAAI,CAACb,IAAI,CAAC,UAAU,CAAC;EACvB;EAEAc,cAAcA,CAACnB,IAAI,EAAEJ,IAAI,EAAE;IACzB,IAAIwB,OAAO,GAAG,IAAIpC,aAAa,CAC7B,IAAI,CAACqC,WAAW,EAChB,IAAI,CAACC,cAAc,EACnB,IAAI,CAACC,QAAQ,EACbvB,IAAI,CAACwB,QAAQ,EACb,IAAI,CAACpB,GAAG,EACR,IAAI,CAACU,gBAAgB,EACrB,IAAI,CAACpB,IAAI,CACV;IAED,IAAI,IAAI,CAACA,IAAI,CAACO,YAAY,EAAE;MAC1B,IAAIwB,MAAM,GAAG,IAAI1C,mBAAmB,CAACqC,OAAO,CAAC;MAC7C,IAAI,CAAC1B,IAAI,CAACO,YAAY,CAACyB,GAAG,CAAC,IAAI,CAACtB,GAAG,EAAEqB,MAAM,CAAC;MAC5C,OAAO,IAAI,CAACnB,UAAU,CAACmB,MAAM,CAACE,YAAY,EAAE,CAAC;IAC/C;IACA,OAAO,IAAI,CAACrB,UAAU,CAACc,OAAO,CAAC;EACjC;;EAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACEV,uBAAuBA,CAACkB,MAAM,EAAE7B,GAAG,EAAEH,IAAI,EAAEI,IAAI,EAAE;IAC/C,QAAQ4B,MAAM,CAACC,IAAI,EAAE;MACnB;MACA;MACA;MACA,KAAK,IAAI;QACPD,MAAM,CAACE,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC;QAChB,IAAI,CAACT,WAAW,GAAGO,MAAM,CAACG,SAAS,EAAE;QACrC,IAAI,CAACC,QAAQ,GAAGJ,MAAM,CAACK,UAAU,EAAE;QACnC,IAAI,CAACX,cAAc,GAAGM,MAAM,CAACK,UAAU,EAAE;QACzC,IAAI,CAACC,YAAY,GAAG,IAAI,CAACZ,cAAc;QACvC,IAAI,CAACC,QAAQ,GAAG,EAAE;QAClB,IAAI,IAAI,CAACW,YAAY,GAAG,CAAC,EAAE,OAAQ,IAAI,CAACzB,eAAe,GAAG,IAAI,CAAC0B,0BAA0B;QACzF,IAAI,IAAI,CAACH,QAAQ,GAAG,CAAC,EAAE,OAAQ,IAAI,CAACvB,eAAe,GAAG,IAAI,CAAC2B,wBAAwB;QACnF,OAAO,IAAI,CAACjB,cAAc,CAACnB,IAAI,EAAEJ,IAAI,CAAC;;MAExC;MACA;MACA;MACA,KAAK,IAAI;QACP,MAAMyC,GAAG,GAAGT,MAAM,CAACU,SAAS,CAACtC,IAAI,EAAE,IAAI,CAACuC,UAAU,EAAE,EAAE,IAAI,CAACC,KAAK,CAAC;QACjE;QACA;QACAxC,IAAI,CAACyC,MAAM,IAAIxD,YAAY,CAACyD,eAAe;QAC3C,IAAI,CAACjC,eAAe,GAAG,IAAI,CAACkC,kBAAkB;QAC9C,OAAO,IAAI,CAACC,UAAU,CAACP,GAAG,EAAErC,IAAI,CAAC;;MAEnC;MACA;MACA;MACA;QACEA,IAAI,CAACyC,MAAM,IAAIxD,YAAY,CAACyD,eAAe;QAC3C,IAAI,CAACjC,eAAe,GAAG,IAAI,CAACkC,kBAAkB;QAC9C,OAAO,IAAI,CAACC,UAAU,CAAC1D,MAAM,CAAC2D,oBAAoB,EAAE7C,IAAI,CAAC;IAAC;EAEhE;EAEAoC,wBAAwBA,CAACR,MAAM,EAAE7B,GAAG,EAAEH,IAAI,EAAEI,IAAI,EAAE;IAChD,IAAI,CAACgC,QAAQ,EAAE;IACf,IAAI,CAACT,QAAQ,CAACuB,IAAI,CAAC,IAAI3D,gBAAgB,CAACyC,MAAM,EAAE5B,IAAI,EAAEJ,IAAI,CAACmD,WAAW,CAAC,CAAC;IACxE,IAAI,IAAI,CAACf,QAAQ,KAAK,CAAC,EAAE;MACvB,IAAIhC,IAAI,CAACgD,aAAa,EAAE;QACtB,OAAO,IAAI,CAAC7B,cAAc,CAACnB,IAAI,EAAEJ,IAAI,CAAC;MACxC;MACA,OAAQ,IAAI,CAACa,eAAe,GAAG,IAAI,CAACwC,aAAa;IACnD;EACF;EAEAA,aAAaA,CAACrB,MAAM,EAAE7B,GAAG,EAAEH,IAAI,EAAEI,IAAI,EAAE;IACrC,IAAI,IAAI,CAACgC,QAAQ,GAAG,CAAC,EAAE,OAAQ,IAAI,CAACvB,eAAe,GAAG,IAAI,CAAC2B,wBAAwB;IACnF,OAAO,IAAI,CAACjB,cAAc,CAACnB,IAAI,EAAEJ,IAAI,CAAC;EACxC;EAEAuC,0BAA0BA,CAACP,MAAM,EAAE7B,GAAG,EAAEH,IAAI,EAAEI,IAAI,EAAE;IAClD,IAAI,CAACkC,YAAY,EAAE;IACnB,IAAI,IAAI,CAACA,YAAY,KAAK,CAAC,EAAE;MAC3B,IAAIlC,IAAI,CAACgD,aAAa,EAAE;QACtB,IAAI,IAAI,CAAChB,QAAQ,GAAG,CAAC,EAAE,OAAQ,IAAI,CAACvB,eAAe,GAAG,IAAI,CAAC2B,wBAAwB;QACnF,OAAO,IAAI,CAACjB,cAAc,CAACnB,IAAI,EAAEJ,IAAI,CAAC;MACxC;MACA,OAAQ,IAAI,CAACa,eAAe,GAAG,IAAI,CAACwC,aAAa;IACnD;EACF;;EAEA;AACF;AACA;AACA;AACA;EACEV,UAAUA,CAAA,EAAG;IACX,IAAI,IAAI,CAAC3C,IAAI,EAAE;MACb,IAAI,IAAI,CAACQ,GAAG,CAAC8C,MAAM,GAAG,IAAI,CAACtD,IAAI,CAACuD,QAAQ,EAAE;QACxC,OAAO,IAAI,CAAC/C,GAAG,CAACgD,SAAS,CAAC,CAAC,EAAE,IAAI,CAACxD,IAAI,CAACuD,QAAQ,CAAC,GAAG,KAAK;MAC1D;IACF;IACA,OAAO,IAAI,CAAC/C,GAAG;EACjB;AACF;AAEAiD,MAAM,CAACC,OAAO,GAAGlE,OAAO"},"metadata":{},"sourceType":"script","externalDependencies":[]}