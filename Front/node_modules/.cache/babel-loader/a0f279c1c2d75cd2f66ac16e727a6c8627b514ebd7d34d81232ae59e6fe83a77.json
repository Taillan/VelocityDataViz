{"ast":null,"code":"const PluginAuth = require('./plugin-auth');\n\n/**\n * Use PAM authentication\n */\nclass PamPasswordAuth extends PluginAuth {\n  constructor(packSeq, compressPackSeq, pluginData, cmdParam, resolve, reject, multiAuthResolver) {\n    super(cmdParam, resolve, reject, multiAuthResolver);\n    this.pluginData = pluginData;\n    this.sequenceNo = packSeq;\n    this.counter = 0;\n  }\n  start(out, opts, info) {\n    this.exchange(this.pluginData, out, opts, info);\n    this.onPacketReceive = this.response;\n  }\n  exchange(buffer, out, opts, info) {\n    //conversation is :\n    // - first byte is information tell if question is a password (4) or clear text (2).\n    // - other bytes are the question to user\n\n    out.startPacket(this);\n    let pwd;\n    if (Array.isArray(opts.password)) {\n      pwd = opts.password[this.counter];\n      this.counter++;\n    } else {\n      pwd = opts.password;\n    }\n    if (pwd) out.writeString(pwd);\n    out.writeInt8(0);\n    out.flushPacket();\n  }\n  response(packet, out, opts, info) {\n    const marker = packet.peek();\n    switch (marker) {\n      //*********************************************************************************************************\n      //* OK_Packet and Err_Packet ending packet\n      //*********************************************************************************************************\n      case 0x00:\n      case 0xff:\n        this.emit('send_end');\n        return this.successSend(packet, out, opts, info);\n      default:\n        let promptData = packet.readBuffer();\n        this.exchange(promptData, out, opts, info);\n        this.onPacketReceive = this.response;\n    }\n  }\n}\nmodule.exports = PamPasswordAuth;","map":{"version":3,"names":["PluginAuth","require","PamPasswordAuth","constructor","packSeq","compressPackSeq","pluginData","cmdParam","resolve","reject","multiAuthResolver","sequenceNo","counter","start","out","opts","info","exchange","onPacketReceive","response","buffer","startPacket","pwd","Array","isArray","password","writeString","writeInt8","flushPacket","packet","marker","peek","emit","successSend","promptData","readBuffer","module","exports"],"sources":["/home/warameur/Documents/velocity-data-viz/node_modules/mariadb/lib/cmd/handshake/auth/pam-password-auth.js"],"sourcesContent":["const PluginAuth = require('./plugin-auth');\n\n/**\n * Use PAM authentication\n */\nclass PamPasswordAuth extends PluginAuth {\n  constructor(packSeq, compressPackSeq, pluginData, cmdParam, resolve, reject, multiAuthResolver) {\n    super(cmdParam, resolve, reject, multiAuthResolver);\n    this.pluginData = pluginData;\n    this.sequenceNo = packSeq;\n    this.counter = 0;\n  }\n\n  start(out, opts, info) {\n    this.exchange(this.pluginData, out, opts, info);\n    this.onPacketReceive = this.response;\n  }\n\n  exchange(buffer, out, opts, info) {\n    //conversation is :\n    // - first byte is information tell if question is a password (4) or clear text (2).\n    // - other bytes are the question to user\n\n    out.startPacket(this);\n\n    let pwd;\n    if (Array.isArray(opts.password)) {\n      pwd = opts.password[this.counter];\n      this.counter++;\n    } else {\n      pwd = opts.password;\n    }\n\n    if (pwd) out.writeString(pwd);\n    out.writeInt8(0);\n    out.flushPacket();\n  }\n\n  response(packet, out, opts, info) {\n    const marker = packet.peek();\n    switch (marker) {\n      //*********************************************************************************************************\n      //* OK_Packet and Err_Packet ending packet\n      //*********************************************************************************************************\n      case 0x00:\n      case 0xff:\n        this.emit('send_end');\n        return this.successSend(packet, out, opts, info);\n\n      default:\n        let promptData = packet.readBuffer();\n        this.exchange(promptData, out, opts, info);\n        this.onPacketReceive = this.response;\n    }\n  }\n}\n\nmodule.exports = PamPasswordAuth;\n"],"mappings":"AAAA,MAAMA,UAAU,GAAGC,OAAO,CAAC,eAAe,CAAC;;AAE3C;AACA;AACA;AACA,MAAMC,eAAe,SAASF,UAAU,CAAC;EACvCG,WAAWA,CAACC,OAAO,EAAEC,eAAe,EAAEC,UAAU,EAAEC,QAAQ,EAAEC,OAAO,EAAEC,MAAM,EAAEC,iBAAiB,EAAE;IAC9F,KAAK,CAACH,QAAQ,EAAEC,OAAO,EAAEC,MAAM,EAAEC,iBAAiB,CAAC;IACnD,IAAI,CAACJ,UAAU,GAAGA,UAAU;IAC5B,IAAI,CAACK,UAAU,GAAGP,OAAO;IACzB,IAAI,CAACQ,OAAO,GAAG,CAAC;EAClB;EAEAC,KAAKA,CAACC,GAAG,EAAEC,IAAI,EAAEC,IAAI,EAAE;IACrB,IAAI,CAACC,QAAQ,CAAC,IAAI,CAACX,UAAU,EAAEQ,GAAG,EAAEC,IAAI,EAAEC,IAAI,CAAC;IAC/C,IAAI,CAACE,eAAe,GAAG,IAAI,CAACC,QAAQ;EACtC;EAEAF,QAAQA,CAACG,MAAM,EAAEN,GAAG,EAAEC,IAAI,EAAEC,IAAI,EAAE;IAChC;IACA;IACA;;IAEAF,GAAG,CAACO,WAAW,CAAC,IAAI,CAAC;IAErB,IAAIC,GAAG;IACP,IAAIC,KAAK,CAACC,OAAO,CAACT,IAAI,CAACU,QAAQ,CAAC,EAAE;MAChCH,GAAG,GAAGP,IAAI,CAACU,QAAQ,CAAC,IAAI,CAACb,OAAO,CAAC;MACjC,IAAI,CAACA,OAAO,EAAE;IAChB,CAAC,MAAM;MACLU,GAAG,GAAGP,IAAI,CAACU,QAAQ;IACrB;IAEA,IAAIH,GAAG,EAAER,GAAG,CAACY,WAAW,CAACJ,GAAG,CAAC;IAC7BR,GAAG,CAACa,SAAS,CAAC,CAAC,CAAC;IAChBb,GAAG,CAACc,WAAW,EAAE;EACnB;EAEAT,QAAQA,CAACU,MAAM,EAAEf,GAAG,EAAEC,IAAI,EAAEC,IAAI,EAAE;IAChC,MAAMc,MAAM,GAAGD,MAAM,CAACE,IAAI,EAAE;IAC5B,QAAQD,MAAM;MACZ;MACA;MACA;MACA,KAAK,IAAI;MACT,KAAK,IAAI;QACP,IAAI,CAACE,IAAI,CAAC,UAAU,CAAC;QACrB,OAAO,IAAI,CAACC,WAAW,CAACJ,MAAM,EAAEf,GAAG,EAAEC,IAAI,EAAEC,IAAI,CAAC;MAElD;QACE,IAAIkB,UAAU,GAAGL,MAAM,CAACM,UAAU,EAAE;QACpC,IAAI,CAAClB,QAAQ,CAACiB,UAAU,EAAEpB,GAAG,EAAEC,IAAI,EAAEC,IAAI,CAAC;QAC1C,IAAI,CAACE,eAAe,GAAG,IAAI,CAACC,QAAQ;IAAC;EAE3C;AACF;AAEAiB,MAAM,CAACC,OAAO,GAAGnC,eAAe"},"metadata":{},"sourceType":"script","externalDependencies":[]}