{"ast":null,"code":"'use strict';\n\nclass ConnectionInformation {\n  constructor(opts) {\n    this.threadId = -1;\n    this.status = null;\n    this.serverVersion = null;\n    this.serverCapabilities = null;\n    this.database = opts.database;\n  }\n  hasMinVersion(major, minor, patch) {\n    if (!this.serverVersion) throw new Error('cannot know if server version until connection is established');\n    if (!major) throw new Error('a major version must be set');\n    if (!minor) minor = 0;\n    if (!patch) patch = 0;\n    let ver = this.serverVersion;\n    return ver.major > major || ver.major === major && ver.minor > minor || ver.major === major && ver.minor === minor && ver.patch >= patch;\n  }\n  isMariaDB() {\n    if (!this.serverVersion) throw new Error('cannot know if server is MariaDB until connection is established');\n    return this.serverVersion.mariaDb;\n  }\n\n  /**\n   * Parse raw info to set server major/minor/patch values\n   * @param info\n   */\n  static parseVersionString(info) {\n    let car;\n    let offset = 0;\n    let type = 0;\n    let val = 0;\n    for (; offset < info.serverVersion.raw.length; offset++) {\n      car = info.serverVersion.raw.charCodeAt(offset);\n      if (car < 48 || car > 57) {\n        switch (type) {\n          case 0:\n            info.serverVersion.major = val;\n            break;\n          case 1:\n            info.serverVersion.minor = val;\n            break;\n          case 2:\n            info.serverVersion.patch = val;\n            return;\n        }\n        type++;\n        val = 0;\n      } else {\n        val = val * 10 + car - 48;\n      }\n    }\n    //serverVersion finished by number like \"5.5.57\", assign patchVersion\n    if (type === 2) info.serverVersion.patch = val;\n  }\n}\nmodule.exports = ConnectionInformation;","map":{"version":3,"names":["ConnectionInformation","constructor","opts","threadId","status","serverVersion","serverCapabilities","database","hasMinVersion","major","minor","patch","Error","ver","isMariaDB","mariaDb","parseVersionString","info","car","offset","type","val","raw","length","charCodeAt","module","exports"],"sources":["/home/warameur/Documents/velocity-data-viz/node_modules/mariadb/lib/misc/connection-information.js"],"sourcesContent":["'use strict';\n\nclass ConnectionInformation {\n  constructor(opts) {\n    this.threadId = -1;\n    this.status = null;\n    this.serverVersion = null;\n    this.serverCapabilities = null;\n    this.database = opts.database;\n  }\n\n  hasMinVersion(major, minor, patch) {\n    if (!this.serverVersion) throw new Error('cannot know if server version until connection is established');\n\n    if (!major) throw new Error('a major version must be set');\n\n    if (!minor) minor = 0;\n    if (!patch) patch = 0;\n\n    let ver = this.serverVersion;\n    return (\n      ver.major > major ||\n      (ver.major === major && ver.minor > minor) ||\n      (ver.major === major && ver.minor === minor && ver.patch >= patch)\n    );\n  }\n\n  isMariaDB() {\n    if (!this.serverVersion) throw new Error('cannot know if server is MariaDB until connection is established');\n    return this.serverVersion.mariaDb;\n  }\n\n  /**\n   * Parse raw info to set server major/minor/patch values\n   * @param info\n   */\n  static parseVersionString(info) {\n    let car;\n    let offset = 0;\n    let type = 0;\n    let val = 0;\n\n    for (; offset < info.serverVersion.raw.length; offset++) {\n      car = info.serverVersion.raw.charCodeAt(offset);\n      if (car < 48 || car > 57) {\n        switch (type) {\n          case 0:\n            info.serverVersion.major = val;\n            break;\n          case 1:\n            info.serverVersion.minor = val;\n            break;\n          case 2:\n            info.serverVersion.patch = val;\n            return;\n        }\n        type++;\n        val = 0;\n      } else {\n        val = val * 10 + car - 48;\n      }\n    }\n    //serverVersion finished by number like \"5.5.57\", assign patchVersion\n    if (type === 2) info.serverVersion.patch = val;\n  }\n}\n\nmodule.exports = ConnectionInformation;\n"],"mappings":"AAAA,YAAY;;AAEZ,MAAMA,qBAAqB,CAAC;EAC1BC,WAAWA,CAACC,IAAI,EAAE;IAChB,IAAI,CAACC,QAAQ,GAAG,CAAC,CAAC;IAClB,IAAI,CAACC,MAAM,GAAG,IAAI;IAClB,IAAI,CAACC,aAAa,GAAG,IAAI;IACzB,IAAI,CAACC,kBAAkB,GAAG,IAAI;IAC9B,IAAI,CAACC,QAAQ,GAAGL,IAAI,CAACK,QAAQ;EAC/B;EAEAC,aAAaA,CAACC,KAAK,EAAEC,KAAK,EAAEC,KAAK,EAAE;IACjC,IAAI,CAAC,IAAI,CAACN,aAAa,EAAE,MAAM,IAAIO,KAAK,CAAC,+DAA+D,CAAC;IAEzG,IAAI,CAACH,KAAK,EAAE,MAAM,IAAIG,KAAK,CAAC,6BAA6B,CAAC;IAE1D,IAAI,CAACF,KAAK,EAAEA,KAAK,GAAG,CAAC;IACrB,IAAI,CAACC,KAAK,EAAEA,KAAK,GAAG,CAAC;IAErB,IAAIE,GAAG,GAAG,IAAI,CAACR,aAAa;IAC5B,OACEQ,GAAG,CAACJ,KAAK,GAAGA,KAAK,IAChBI,GAAG,CAACJ,KAAK,KAAKA,KAAK,IAAII,GAAG,CAACH,KAAK,GAAGA,KAAM,IACzCG,GAAG,CAACJ,KAAK,KAAKA,KAAK,IAAII,GAAG,CAACH,KAAK,KAAKA,KAAK,IAAIG,GAAG,CAACF,KAAK,IAAIA,KAAM;EAEtE;EAEAG,SAASA,CAAA,EAAG;IACV,IAAI,CAAC,IAAI,CAACT,aAAa,EAAE,MAAM,IAAIO,KAAK,CAAC,kEAAkE,CAAC;IAC5G,OAAO,IAAI,CAACP,aAAa,CAACU,OAAO;EACnC;;EAEA;AACF;AACA;AACA;EACE,OAAOC,kBAAkBA,CAACC,IAAI,EAAE;IAC9B,IAAIC,GAAG;IACP,IAAIC,MAAM,GAAG,CAAC;IACd,IAAIC,IAAI,GAAG,CAAC;IACZ,IAAIC,GAAG,GAAG,CAAC;IAEX,OAAOF,MAAM,GAAGF,IAAI,CAACZ,aAAa,CAACiB,GAAG,CAACC,MAAM,EAAEJ,MAAM,EAAE,EAAE;MACvDD,GAAG,GAAGD,IAAI,CAACZ,aAAa,CAACiB,GAAG,CAACE,UAAU,CAACL,MAAM,CAAC;MAC/C,IAAID,GAAG,GAAG,EAAE,IAAIA,GAAG,GAAG,EAAE,EAAE;QACxB,QAAQE,IAAI;UACV,KAAK,CAAC;YACJH,IAAI,CAACZ,aAAa,CAACI,KAAK,GAAGY,GAAG;YAC9B;UACF,KAAK,CAAC;YACJJ,IAAI,CAACZ,aAAa,CAACK,KAAK,GAAGW,GAAG;YAC9B;UACF,KAAK,CAAC;YACJJ,IAAI,CAACZ,aAAa,CAACM,KAAK,GAAGU,GAAG;YAC9B;QAAO;QAEXD,IAAI,EAAE;QACNC,GAAG,GAAG,CAAC;MACT,CAAC,MAAM;QACLA,GAAG,GAAGA,GAAG,GAAG,EAAE,GAAGH,GAAG,GAAG,EAAE;MAC3B;IACF;IACA;IACA,IAAIE,IAAI,KAAK,CAAC,EAAEH,IAAI,CAACZ,aAAa,CAACM,KAAK,GAAGU,GAAG;EAChD;AACF;AAEAI,MAAM,CAACC,OAAO,GAAG1B,qBAAqB"},"metadata":{},"sourceType":"script","externalDependencies":[]}