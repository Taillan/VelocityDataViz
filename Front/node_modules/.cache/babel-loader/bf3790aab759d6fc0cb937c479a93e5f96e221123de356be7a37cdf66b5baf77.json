{"ast":null,"code":"'use strict';\n\nconst Command = require('./command');\nconst ServerStatus = require('../const/server-status');\nconst ColumnDefinition = require('./column-definition');\nconst Errors = require('../misc/errors');\nconst fs = require('fs');\nconst Parse = require('../misc/parse');\nconst BinaryDecoder = require('./decoder/binary-decoder');\nconst TextDecoder = require('./decoder/text-decoder');\nconst OkPacket = require('./class/ok-packet');\nconst StateChange = require('../const/state-change');\nconst Collations = require('../const/collations');\n\n/**\n * handle COM_QUERY / COM_STMT_EXECUTE results\n * see : https://mariadb.com/kb/en/library/4-server-response-packets/\n */\nclass Parser extends Command {\n  constructor(resolve, reject, connOpts, cmdParam) {\n    super(cmdParam, resolve, reject);\n    this._responseIndex = 0;\n    this._rows = [];\n    this.opts = cmdParam.opts ? Object.assign({}, connOpts, cmdParam.opts) : connOpts;\n    this.sql = cmdParam.sql;\n    this.initialValues = cmdParam.values;\n    this.canSkipMeta = false;\n  }\n\n  /**\n   * Read Query response packet.\n   * packet can be :\n   * - a result-set\n   * - an ERR_Packet\n   * - a OK_Packet\n   * - LOCAL_INFILE Packet\n   *\n   * @param packet  query response\n   * @param out     output writer\n   * @param opts    connection options\n   * @param info    connection info\n   */\n  readResponsePacket(packet, out, opts, info) {\n    switch (packet.peek()) {\n      //*********************************************************************************************************\n      //* OK response\n      //*********************************************************************************************************\n      case 0x00:\n        return this.readOKPacket(packet, out, opts, info);\n\n      //*********************************************************************************************************\n      //* ERROR response\n      //*********************************************************************************************************\n      case 0xff:\n        const err = packet.readError(info, this.displaySql(), this.stack);\n        //force in transaction status, since query will have created a transaction if autocommit is off\n        //goal is to avoid unnecessary COMMIT/ROLLBACK.\n        info.status |= ServerStatus.STATUS_IN_TRANS;\n        return this.throwError(err, info);\n\n      //*********************************************************************************************************\n      //* LOCAL INFILE response\n      //*********************************************************************************************************\n      case 0xfb:\n        return this.readLocalInfile(packet, out, opts, info);\n\n      //*********************************************************************************************************\n      //* Parser\n      //*********************************************************************************************************\n      default:\n        return this.readResultSet(packet, info);\n    }\n  }\n\n  /**\n   * Read result-set packets :\n   * see https://mariadb.com/kb/en/library/resultset/\n   *\n   * @param packet    Column count packet\n   * @param info      current connection information\n   * @returns {Parser.readColumn} next packet handler\n   */\n  readResultSet(packet, info) {\n    this._columnCount = packet.readUnsignedLength();\n    this._rows.push([]);\n    if (this.canSkipMeta && info.serverPermitSkipMeta && packet.readUInt8() === 0) {\n      // command support skipping meta\n      // server permits it\n      // and tells that no columns follows, using prepare results\n      this._columns = this.prepare.columns;\n      this.emit('fields', this._columns);\n      this.setParser();\n      return this.onPacketReceive = info.eofDeprecated ? this.readResultSetRow : this.readIntermediateEOF;\n    }\n    this._columns = [];\n    this.onPacketReceive = this.readColumn;\n  }\n\n  /**\n   * Read OK_Packet.\n   * see https://mariadb.com/kb/en/library/ok_packet/\n   *\n   * @param packet    OK_Packet\n   * @param opts      connection options\n   * @param info      connection information\n   * @param out       output writer\n   * @returns {*}     null or {Result.readResponsePacket} in case of multi-result-set\n   */\n  readOKPacket(packet, out, opts, info) {\n    packet.skip(1); //skip header\n\n    const affectedRows = packet.readUnsignedLength();\n    let insertId = packet.readSignedLengthBigInt();\n    info.status = packet.readUInt16();\n    if (insertId != null && (this.opts.supportBigNumbers || this.opts.insertIdAsNumber)) {\n      if (this.opts.insertIdAsNumber && this.opts.checkNumberRange && !Number.isSafeInteger(Number(insertId))) {\n        this.onPacketReceive = info.status & ServerStatus.MORE_RESULTS_EXISTS ? this.readResponsePacket : null;\n        this.throwUnexpectedError(`last insert id value ${insertId} can't safely be converted to number`, false, info, '42000', Errors.ER_PARSING_PRECISION);\n        return;\n      }\n      if (this.opts.supportBigNumbers && (this.opts.bigNumberStrings || !Number.isSafeInteger(Number(insertId)))) {\n        insertId = insertId.toString();\n      } else insertId = Number(insertId);\n    }\n    const okPacket = new OkPacket(affectedRows, insertId, packet.readUInt16());\n    if (info.status & ServerStatus.SESSION_STATE_CHANGED) {\n      packet.skipLengthCodedNumber();\n      while (packet.remaining()) {\n        const len = packet.readUnsignedLength();\n        if (len > 0) {\n          const subPacket = packet.subPacketLengthEncoded(len);\n          while (subPacket.remaining()) {\n            const type = subPacket.readUInt8();\n            switch (type) {\n              case StateChange.SESSION_TRACK_SYSTEM_VARIABLES:\n                const subSubPacket = subPacket.subPacketLengthEncoded(subPacket.readUnsignedLength());\n                const variable = subSubPacket.readStringLengthEncoded();\n                const value = subSubPacket.readStringLengthEncoded();\n                switch (variable) {\n                  case 'character_set_client':\n                    info.collation = Collations.fromCharset(value);\n                    if (info.collation === undefined) {\n                      this.throwError(new Error(\"unknown charset : '\" + value + \"'\"), info);\n                      return;\n                    }\n                    opts.emit('collation', info.collation);\n                    break;\n                  default:\n                  //variable not used by driver\n                }\n\n                break;\n              case StateChange.SESSION_TRACK_SCHEMA:\n                const subSubPacket2 = subPacket.subPacketLengthEncoded(subPacket.readUnsignedLength());\n                info.database = subSubPacket2.readStringLengthEncoded();\n                break;\n            }\n          }\n        }\n      }\n    }\n    if (this._responseIndex === 0) {\n      // fast path for standard single result\n      if (info.status & ServerStatus.MORE_RESULTS_EXISTS) {\n        this._rows.push(okPacket);\n        this._responseIndex++;\n        return this.onPacketReceive = this.readResponsePacket;\n      }\n      return this.success(this.opts.metaAsArray ? [okPacket, [null]] : okPacket);\n    }\n    this._rows.push(okPacket);\n    if (info.status & ServerStatus.MORE_RESULTS_EXISTS) {\n      this._responseIndex++;\n      return this.onPacketReceive = this.readResponsePacket;\n    }\n    if (this.opts.metaAsArray) {\n      if (!this._meta) {\n        this._meta = new Array(this._responseIndex);\n      }\n      this._meta[this._responseIndex] = null;\n      this.success([this._rows, this._meta]);\n    } else {\n      this.success(this._rows);\n    }\n  }\n  success(val) {\n    this.successEnd(val);\n    this._columns = null;\n    this._rows = null;\n  }\n\n  /**\n   * Read column information metadata\n   * see https://mariadb.com/kb/en/library/resultset/#column-definition-packet\n   *\n   * @param packet    column definition packet\n   * @param out       output writer\n   * @param opts      connection options\n   * @param info      connection information\n   * @returns {*}\n   */\n  readColumn(packet, out, opts, info) {\n    this._columns.push(new ColumnDefinition(packet, info, this.opts.rowsAsArray));\n\n    // last column\n    if (this._columns.length === this._columnCount) {\n      this.setParser();\n      if (this.canSkipMeta && info.serverPermitSkipMeta && this.prepare != null) {\n        // server can skip meta, but have force sending it.\n        // metadata have changed, updating prepare result accordingly\n        this.prepare.columns = this._columns;\n      }\n      this.emit('fields', this._columns);\n      return this.onPacketReceive = info.eofDeprecated ? this.readResultSetRow : this.readIntermediateEOF;\n    }\n  }\n  setParser() {\n    this._parseFonction = new Array(this._columnCount);\n    if (this.opts.typeCast) {\n      for (let i = 0; i < this._columnCount; i++) {\n        this._parseFonction[i] = this.readCastValue.bind(this, this._columns[i]);\n      }\n    } else {\n      const dataParser = this.binary ? BinaryDecoder.parser : TextDecoder.parser;\n      for (let i = 0; i < this._columnCount; i++) {\n        this._parseFonction[i] = dataParser(this._columns[i], this.opts);\n      }\n    }\n    if (this.opts.rowsAsArray) {\n      this.parseRow = this.parseRowAsArray;\n    } else {\n      this.tableHeader = new Array(this._columnCount);\n      this.parseRow = this.binary ? this.parseRowStdBinary : this.parseRowStdText;\n      if (this.opts.nestTables) {\n        if (typeof this.opts.nestTables === 'string') {\n          for (let i = 0; i < this._columnCount; i++) {\n            this.tableHeader[i] = this._columns[i].table() + this.opts.nestTables + this._columns[i].name();\n          }\n          this.checkDuplicates();\n        } else if (this.opts.nestTables === true) {\n          this.parseRow = this.parseRowNested;\n          for (let i = 0; i < this._columnCount; i++) {\n            this.tableHeader[i] = [this._columns[i].table(), this._columns[i].name()];\n          }\n          this.checkNestTablesDuplicates();\n        }\n      } else {\n        for (let i = 0; i < this._columnCount; i++) {\n          this.tableHeader[i] = this._columns[i].name();\n        }\n        this.checkDuplicates();\n      }\n    }\n  }\n  checkDuplicates() {\n    if (this.opts.checkDuplicate) {\n      for (let i = 0; i < this._columnCount; i++) {\n        if (this.tableHeader.indexOf(this.tableHeader[i], i + 1) > 0) {\n          const dupes = this.tableHeader.reduce((acc, v, i, arr) => arr.indexOf(v) !== i && acc.indexOf(v) === -1 ? acc.concat(v) : acc, []);\n          this.throwUnexpectedError(`Error in results, duplicate field name \\`${dupes[0]}\\`.\\n(see option \\`checkDuplicate\\`)`, false, null, '42000', Errors.ER_DUPLICATE_FIELD);\n        }\n      }\n    }\n  }\n  checkNestTablesDuplicates() {\n    if (this.opts.checkDuplicate) {\n      for (let i = 0; i < this._columnCount; i++) {\n        for (let j = 0; j < i; j++) {\n          if (this.tableHeader[j][0] === this.tableHeader[i][0] && this.tableHeader[j][1] === this.tableHeader[i][1]) {\n            this.throwUnexpectedError(`Error in results, duplicate field name \\`${this.tableHeader[i][0]}\\`.\\`${this.tableHeader[i][1]}\\`\\n(see option \\`checkDuplicate\\`)`, false, null, '42000', Errors.ER_DUPLICATE_FIELD);\n          }\n        }\n      }\n    }\n  }\n\n  /**\n   * Read intermediate EOF.\n   * _only for server before MariaDB 10.2 / MySQL 5.7 that doesn't have CLIENT_DEPRECATE_EOF capability_\n   * see https://mariadb.com/kb/en/library/eof_packet/\n   *\n   * @param packet    EOF Packet\n   * @param out       output writer\n   * @param opts      connection options\n   * @param info      connection information\n   * @returns {*}\n   */\n  readIntermediateEOF(packet, out, opts, info) {\n    if (packet.peek() !== 0xfe) {\n      return this.throwNewError('Error in protocol, expected EOF packet', true, info, '42000', Errors.ER_EOF_EXPECTED);\n    }\n\n    //before MySQL 5.7.5, last EOF doesn't contain the good flag SERVER_MORE_RESULTS_EXISTS\n    //for OUT parameters. It must be checked here\n    //(5.7.5 does have the CLIENT_DEPRECATE_EOF capability, so this packet in not even send)\n    packet.skip(3);\n    info.status = packet.readUInt16();\n    this.isOutParameter = info.status & ServerStatus.PS_OUT_PARAMS;\n    this.onPacketReceive = this.readResultSetRow;\n  }\n  handleNewRows(row) {\n    this._rows[this._responseIndex].push(row);\n  }\n\n  /**\n   * Check if packet is result-set end = EOF of OK_Packet with EOF header according to CLIENT_DEPRECATE_EOF capability\n   * or a result-set row\n   *\n   * @param packet    current packet\n   * @param out       output writer\n   * @param opts      connection options\n   * @param info      connection information\n   * @returns {*}\n   */\n  readResultSetRow(packet, out, opts, info) {\n    if (packet.peek() >= 0xfe) {\n      if (packet.peek() === 0xff) {\n        //force in transaction status, since query will have created a transaction if autocommit is off\n        //goal is to avoid unnecessary COMMIT/ROLLBACK.\n        info.status |= ServerStatus.STATUS_IN_TRANS;\n        return this.throwError(packet.readError(info, this.displaySql(), this.stack), info);\n      }\n      if (!info.eofDeprecated && packet.length() < 13 || info.eofDeprecated && packet.length() < 0xffffff) {\n        if (!info.eofDeprecated) {\n          packet.skip(3);\n          info.status = packet.readUInt16();\n        } else {\n          packet.skip(1); //skip header\n          packet.skipLengthCodedNumber(); //skip update count\n          packet.skipLengthCodedNumber(); //skip insert id\n          info.status = packet.readUInt16();\n        }\n        if (this.opts.metaAsArray) {\n          //return promise object as array :\n          // example for SELECT 1 =>\n          // [\n          //   [ {\"1\": 1} ],      //rows\n          //   [ColumnDefinition] //meta\n          // ]\n\n          if (info.status & ServerStatus.MORE_RESULTS_EXISTS || this.isOutParameter) {\n            if (!this._meta) this._meta = [];\n            this._meta[this._responseIndex] = this._columns;\n            this._responseIndex++;\n            return this.onPacketReceive = this.readResponsePacket;\n          }\n          if (this._responseIndex === 0) {\n            this.success([this._rows[0], this._columns]);\n          } else {\n            if (!this._meta) this._meta = [];\n            this._meta[this._responseIndex] = this._columns;\n            this.success([this._rows, this._meta]);\n          }\n        } else {\n          //return promise object as rows that have meta property :\n          // example for SELECT 1 =>\n          // [\n          //   {\"1\": 1},\n          //   meta: [ColumnDefinition]\n          // ]\n          Object.defineProperty(this._rows[this._responseIndex], 'meta', {\n            value: this._columns,\n            writable: true,\n            enumerable: this.opts.metaEnumerable\n          });\n          if (info.status & ServerStatus.MORE_RESULTS_EXISTS || this.isOutParameter) {\n            this._responseIndex++;\n            return this.onPacketReceive = this.readResponsePacket;\n          }\n          this.success(this._responseIndex === 0 ? this._rows[0] : this._rows);\n        }\n        return;\n      }\n    }\n    this.handleNewRows(this.parseRow(packet));\n  }\n\n  /**\n   * Display current SQL with parameters (truncated if too big)\n   *\n   * @returns {string}\n   */\n  displaySql() {\n    if (this.opts && this.initialValues) {\n      if (this.sql.length > this.opts.debugLen) {\n        return this.sql.substring(0, this.opts.debugLen) + '...';\n      }\n      let sqlMsg = this.sql + ' - parameters:';\n      return this.logParameters(sqlMsg, this.initialValues);\n    }\n    return this.sql + ' - parameters:[]';\n  }\n  logParameters(sqlMsg, values) {\n    if (this.opts.namedPlaceholders) {\n      sqlMsg += '{';\n      let first = true;\n      for (let key in values) {\n        if (first) {\n          first = false;\n        } else {\n          sqlMsg += ',';\n        }\n        sqlMsg += \"'\" + key + \"':\";\n        let param = values[key];\n        sqlMsg = Parser.logParam(sqlMsg, param);\n        if (sqlMsg.length > this.opts.debugLen) {\n          sqlMsg = sqlMsg.substring(0, this.opts.debugLen) + '...';\n          break;\n        }\n      }\n      sqlMsg += '}';\n    } else {\n      sqlMsg += '[';\n      if (Array.isArray(values)) {\n        for (let i = 0; i < values.length; i++) {\n          if (i !== 0) sqlMsg += ',';\n          let param = values[i];\n          sqlMsg = Parser.logParam(sqlMsg, param);\n          if (sqlMsg.length > this.opts.debugLen) {\n            sqlMsg = sqlMsg.substring(0, this.opts.debugLen) + '...';\n            break;\n          }\n        }\n      } else {\n        sqlMsg = Parser.logParam(sqlMsg, values);\n        if (sqlMsg.length > this.opts.debugLen) {\n          sqlMsg = sqlMsg.substring(0, this.opts.debugLen) + '...';\n        }\n      }\n      sqlMsg += ']';\n    }\n    return sqlMsg;\n  }\n  parseRowAsArray(packet) {\n    const row = new Array(this._columnCount);\n    const nullBitMap = this.binary ? BinaryDecoder.newRow(packet, this._columns) : null;\n    for (let i = 0; i < this._columnCount; i++) {\n      row[i] = this._parseFonction[i](packet, this.opts, this.unexpectedError, nullBitMap, i);\n    }\n    return row;\n  }\n  parseRowNested(packet) {\n    const row = {};\n    const nullBitMap = this.binary ? BinaryDecoder.newRow(packet, this._columns) : null;\n    for (let i = 0; i < this._columnCount; i++) {\n      if (!row[this.tableHeader[i][0]]) row[this.tableHeader[i][0]] = {};\n      row[this.tableHeader[i][0]][this.tableHeader[i][1]] = this._parseFonction[i](packet, this.opts, this.unexpectedError, nullBitMap, i);\n    }\n    return row;\n  }\n  parseRowStdText(packet) {\n    const row = {};\n    for (let i = 0; i < this._columnCount; i++) {\n      row[this.tableHeader[i]] = this._parseFonction[i](packet, this.opts, this.unexpectedError);\n    }\n    return row;\n  }\n  parseRowStdBinary(packet) {\n    const nullBitMap = BinaryDecoder.newRow(packet, this._columns);\n    const row = {};\n    for (let i = 0; i < this._columnCount; i++) {\n      row[this.tableHeader[i]] = this._parseFonction[i](packet, this.opts, this.unexpectedError, nullBitMap, i);\n    }\n    return row;\n  }\n  readCastValue(column, packet, opts, unexpectedError, nullBitmap, index) {\n    if (this.binary) {\n      BinaryDecoder.castWrapper(column, packet, opts, nullBitmap, index);\n    } else {\n      TextDecoder.castWrapper(column, packet, opts, nullBitmap, index);\n    }\n    const dataParser = this.binary ? BinaryDecoder.parser : TextDecoder.parser;\n    return opts.typeCast(column, dataParser(column, opts).bind(null, packet, opts, unexpectedError, nullBitmap, index));\n  }\n  readLocalInfile(packet, out, opts, info) {\n    packet.skip(1); //skip header\n    out.startPacket(this);\n    const fileName = packet.readStringRemaining();\n    if (!Parse.validateFileName(this.sql, this.initialValues, fileName)) {\n      out.writeEmptyPacket();\n      const error = Errors.createError(\"LOCAL INFILE wrong filename. '\" + fileName + \"' doesn't correspond to query \" + this.sql + '. Query cancelled. Check for malicious server / proxy', Errors.ER_LOCAL_INFILE_WRONG_FILENAME, info, 'HY000', this.sql);\n      process.nextTick(this.reject, error);\n      this.reject = null;\n      this.resolve = null;\n      return this.onPacketReceive = this.readResponsePacket;\n    }\n\n    // this.sequenceNo = 2;\n    // this.compressSequenceNo = 2;\n    const stream = fs.createReadStream(fileName);\n    stream.on('error', err => {\n      out.writeEmptyPacket();\n      const error = Errors.createError(`LOCAL INFILE command failed: ${err.message}`, Errors.ER_LOCAL_INFILE_NOT_READABLE, info, '22000', this.sql);\n      process.nextTick(this.reject, error);\n      this.reject = null;\n      this.resolve = null;\n    });\n    stream.on('data', chunk => {\n      out.writeBuffer(chunk, 0, chunk.length);\n    });\n    stream.on('end', () => {\n      if (!out.isEmpty()) {\n        out.flushBuffer(false);\n      }\n      out.writeEmptyPacket();\n    });\n    this.onPacketReceive = this.readResponsePacket;\n  }\n  static logParam(sqlMsg, param) {\n    if (param === undefined || param === null) {\n      sqlMsg += param === undefined ? 'undefined' : 'null';\n    } else {\n      switch (param.constructor.name) {\n        case 'Buffer':\n          sqlMsg += '0x' + param.toString('hex', 0, Math.min(1024, param.length)) + '';\n          break;\n        case 'String':\n          sqlMsg += \"'\" + param + \"'\";\n          break;\n        case 'Date':\n          sqlMsg += getStringDate(param);\n          break;\n        case 'Object':\n          sqlMsg += JSON.stringify(param);\n          break;\n        default:\n          sqlMsg += param.toString();\n      }\n    }\n    return sqlMsg;\n  }\n}\nfunction getStringDate(param) {\n  return \"'\" + ('00' + (param.getMonth() + 1)).slice(-2) + '/' + ('00' + param.getDate()).slice(-2) + '/' + param.getFullYear() + ' ' + ('00' + param.getHours()).slice(-2) + ':' + ('00' + param.getMinutes()).slice(-2) + ':' + ('00' + param.getSeconds()).slice(-2) + '.' + ('000' + param.getMilliseconds()).slice(-3) + \"'\";\n}\nmodule.exports = Parser;","map":{"version":3,"names":["Command","require","ServerStatus","ColumnDefinition","Errors","fs","Parse","BinaryDecoder","TextDecoder","OkPacket","StateChange","Collations","Parser","constructor","resolve","reject","connOpts","cmdParam","_responseIndex","_rows","opts","Object","assign","sql","initialValues","values","canSkipMeta","readResponsePacket","packet","out","info","peek","readOKPacket","err","readError","displaySql","stack","status","STATUS_IN_TRANS","throwError","readLocalInfile","readResultSet","_columnCount","readUnsignedLength","push","serverPermitSkipMeta","readUInt8","_columns","prepare","columns","emit","setParser","onPacketReceive","eofDeprecated","readResultSetRow","readIntermediateEOF","readColumn","skip","affectedRows","insertId","readSignedLengthBigInt","readUInt16","supportBigNumbers","insertIdAsNumber","checkNumberRange","Number","isSafeInteger","MORE_RESULTS_EXISTS","throwUnexpectedError","ER_PARSING_PRECISION","bigNumberStrings","toString","okPacket","SESSION_STATE_CHANGED","skipLengthCodedNumber","remaining","len","subPacket","subPacketLengthEncoded","type","SESSION_TRACK_SYSTEM_VARIABLES","subSubPacket","variable","readStringLengthEncoded","value","collation","fromCharset","undefined","Error","SESSION_TRACK_SCHEMA","subSubPacket2","database","success","metaAsArray","_meta","Array","val","successEnd","rowsAsArray","length","_parseFonction","typeCast","i","readCastValue","bind","dataParser","binary","parser","parseRow","parseRowAsArray","tableHeader","parseRowStdBinary","parseRowStdText","nestTables","table","name","checkDuplicates","parseRowNested","checkNestTablesDuplicates","checkDuplicate","indexOf","dupes","reduce","acc","v","arr","concat","ER_DUPLICATE_FIELD","j","throwNewError","ER_EOF_EXPECTED","isOutParameter","PS_OUT_PARAMS","handleNewRows","row","defineProperty","writable","enumerable","metaEnumerable","debugLen","substring","sqlMsg","logParameters","namedPlaceholders","first","key","param","logParam","isArray","nullBitMap","newRow","unexpectedError","column","nullBitmap","index","castWrapper","startPacket","fileName","readStringRemaining","validateFileName","writeEmptyPacket","error","createError","ER_LOCAL_INFILE_WRONG_FILENAME","process","nextTick","stream","createReadStream","on","message","ER_LOCAL_INFILE_NOT_READABLE","chunk","writeBuffer","isEmpty","flushBuffer","Math","min","getStringDate","JSON","stringify","getMonth","slice","getDate","getFullYear","getHours","getMinutes","getSeconds","getMilliseconds","module","exports"],"sources":["/home/warameur/Documents/velocity-data-viz/node_modules/mariadb/lib/cmd/parser.js"],"sourcesContent":["'use strict';\n\nconst Command = require('./command');\nconst ServerStatus = require('../const/server-status');\nconst ColumnDefinition = require('./column-definition');\nconst Errors = require('../misc/errors');\nconst fs = require('fs');\nconst Parse = require('../misc/parse');\nconst BinaryDecoder = require('./decoder/binary-decoder');\nconst TextDecoder = require('./decoder/text-decoder');\nconst OkPacket = require('./class/ok-packet');\nconst StateChange = require('../const/state-change');\nconst Collations = require('../const/collations');\n\n/**\n * handle COM_QUERY / COM_STMT_EXECUTE results\n * see : https://mariadb.com/kb/en/library/4-server-response-packets/\n */\nclass Parser extends Command {\n  constructor(resolve, reject, connOpts, cmdParam) {\n    super(cmdParam, resolve, reject);\n    this._responseIndex = 0;\n    this._rows = [];\n    this.opts = cmdParam.opts ? Object.assign({}, connOpts, cmdParam.opts) : connOpts;\n    this.sql = cmdParam.sql;\n    this.initialValues = cmdParam.values;\n    this.canSkipMeta = false;\n  }\n\n  /**\n   * Read Query response packet.\n   * packet can be :\n   * - a result-set\n   * - an ERR_Packet\n   * - a OK_Packet\n   * - LOCAL_INFILE Packet\n   *\n   * @param packet  query response\n   * @param out     output writer\n   * @param opts    connection options\n   * @param info    connection info\n   */\n  readResponsePacket(packet, out, opts, info) {\n    switch (packet.peek()) {\n      //*********************************************************************************************************\n      //* OK response\n      //*********************************************************************************************************\n      case 0x00:\n        return this.readOKPacket(packet, out, opts, info);\n\n      //*********************************************************************************************************\n      //* ERROR response\n      //*********************************************************************************************************\n      case 0xff:\n        const err = packet.readError(info, this.displaySql(), this.stack);\n        //force in transaction status, since query will have created a transaction if autocommit is off\n        //goal is to avoid unnecessary COMMIT/ROLLBACK.\n        info.status |= ServerStatus.STATUS_IN_TRANS;\n        return this.throwError(err, info);\n\n      //*********************************************************************************************************\n      //* LOCAL INFILE response\n      //*********************************************************************************************************\n      case 0xfb:\n        return this.readLocalInfile(packet, out, opts, info);\n\n      //*********************************************************************************************************\n      //* Parser\n      //*********************************************************************************************************\n      default:\n        return this.readResultSet(packet, info);\n    }\n  }\n\n  /**\n   * Read result-set packets :\n   * see https://mariadb.com/kb/en/library/resultset/\n   *\n   * @param packet    Column count packet\n   * @param info      current connection information\n   * @returns {Parser.readColumn} next packet handler\n   */\n  readResultSet(packet, info) {\n    this._columnCount = packet.readUnsignedLength();\n\n    this._rows.push([]);\n    if (this.canSkipMeta && info.serverPermitSkipMeta && packet.readUInt8() === 0) {\n      // command support skipping meta\n      // server permits it\n      // and tells that no columns follows, using prepare results\n      this._columns = this.prepare.columns;\n      this.emit('fields', this._columns);\n      this.setParser();\n      return (this.onPacketReceive = info.eofDeprecated ? this.readResultSetRow : this.readIntermediateEOF);\n    }\n\n    this._columns = [];\n    this.onPacketReceive = this.readColumn;\n  }\n\n  /**\n   * Read OK_Packet.\n   * see https://mariadb.com/kb/en/library/ok_packet/\n   *\n   * @param packet    OK_Packet\n   * @param opts      connection options\n   * @param info      connection information\n   * @param out       output writer\n   * @returns {*}     null or {Result.readResponsePacket} in case of multi-result-set\n   */\n  readOKPacket(packet, out, opts, info) {\n    packet.skip(1); //skip header\n\n    const affectedRows = packet.readUnsignedLength();\n    let insertId = packet.readSignedLengthBigInt();\n    info.status = packet.readUInt16();\n    if (insertId != null && (this.opts.supportBigNumbers || this.opts.insertIdAsNumber)) {\n      if (this.opts.insertIdAsNumber && this.opts.checkNumberRange && !Number.isSafeInteger(Number(insertId))) {\n        this.onPacketReceive = info.status & ServerStatus.MORE_RESULTS_EXISTS ? this.readResponsePacket : null;\n        this.throwUnexpectedError(\n          `last insert id value ${insertId} can't safely be converted to number`,\n          false,\n          info,\n          '42000',\n          Errors.ER_PARSING_PRECISION\n        );\n        return;\n      }\n      if (this.opts.supportBigNumbers && (this.opts.bigNumberStrings || !Number.isSafeInteger(Number(insertId)))) {\n        insertId = insertId.toString();\n      } else insertId = Number(insertId);\n    }\n\n    const okPacket = new OkPacket(affectedRows, insertId, packet.readUInt16());\n\n    if (info.status & ServerStatus.SESSION_STATE_CHANGED) {\n      packet.skipLengthCodedNumber();\n      while (packet.remaining()) {\n        const len = packet.readUnsignedLength();\n        if (len > 0) {\n          const subPacket = packet.subPacketLengthEncoded(len);\n          while (subPacket.remaining()) {\n            const type = subPacket.readUInt8();\n            switch (type) {\n              case StateChange.SESSION_TRACK_SYSTEM_VARIABLES:\n                const subSubPacket = subPacket.subPacketLengthEncoded(subPacket.readUnsignedLength());\n                const variable = subSubPacket.readStringLengthEncoded();\n                const value = subSubPacket.readStringLengthEncoded();\n\n                switch (variable) {\n                  case 'character_set_client':\n                    info.collation = Collations.fromCharset(value);\n                    if (info.collation === undefined) {\n                      this.throwError(new Error(\"unknown charset : '\" + value + \"'\"), info);\n                      return;\n                    }\n                    opts.emit('collation', info.collation);\n                    break;\n\n                  default:\n                  //variable not used by driver\n                }\n                break;\n\n              case StateChange.SESSION_TRACK_SCHEMA:\n                const subSubPacket2 = subPacket.subPacketLengthEncoded(subPacket.readUnsignedLength());\n                info.database = subSubPacket2.readStringLengthEncoded();\n                break;\n            }\n          }\n        }\n      }\n    }\n\n    if (this._responseIndex === 0) {\n      // fast path for standard single result\n      if (info.status & ServerStatus.MORE_RESULTS_EXISTS) {\n        this._rows.push(okPacket);\n        this._responseIndex++;\n        return (this.onPacketReceive = this.readResponsePacket);\n      }\n      return this.success(this.opts.metaAsArray ? [okPacket, [null]] : okPacket);\n    }\n\n    this._rows.push(okPacket);\n\n    if (info.status & ServerStatus.MORE_RESULTS_EXISTS) {\n      this._responseIndex++;\n      return (this.onPacketReceive = this.readResponsePacket);\n    }\n\n    if (this.opts.metaAsArray) {\n      if (!this._meta) {\n        this._meta = new Array(this._responseIndex);\n      }\n      this._meta[this._responseIndex] = null;\n      this.success([this._rows, this._meta]);\n    } else {\n      this.success(this._rows);\n    }\n  }\n\n  success(val) {\n    this.successEnd(val);\n    this._columns = null;\n    this._rows = null;\n  }\n\n  /**\n   * Read column information metadata\n   * see https://mariadb.com/kb/en/library/resultset/#column-definition-packet\n   *\n   * @param packet    column definition packet\n   * @param out       output writer\n   * @param opts      connection options\n   * @param info      connection information\n   * @returns {*}\n   */\n  readColumn(packet, out, opts, info) {\n    this._columns.push(new ColumnDefinition(packet, info, this.opts.rowsAsArray));\n\n    // last column\n    if (this._columns.length === this._columnCount) {\n      this.setParser();\n      if (this.canSkipMeta && info.serverPermitSkipMeta && this.prepare != null) {\n        // server can skip meta, but have force sending it.\n        // metadata have changed, updating prepare result accordingly\n        this.prepare.columns = this._columns;\n      }\n      this.emit('fields', this._columns);\n\n      return (this.onPacketReceive = info.eofDeprecated ? this.readResultSetRow : this.readIntermediateEOF);\n    }\n  }\n\n  setParser() {\n    this._parseFonction = new Array(this._columnCount);\n    if (this.opts.typeCast) {\n      for (let i = 0; i < this._columnCount; i++) {\n        this._parseFonction[i] = this.readCastValue.bind(this, this._columns[i]);\n      }\n    } else {\n      const dataParser = this.binary ? BinaryDecoder.parser : TextDecoder.parser;\n      for (let i = 0; i < this._columnCount; i++) {\n        this._parseFonction[i] = dataParser(this._columns[i], this.opts);\n      }\n    }\n\n    if (this.opts.rowsAsArray) {\n      this.parseRow = this.parseRowAsArray;\n    } else {\n      this.tableHeader = new Array(this._columnCount);\n      this.parseRow = this.binary ? this.parseRowStdBinary : this.parseRowStdText;\n      if (this.opts.nestTables) {\n        if (typeof this.opts.nestTables === 'string') {\n          for (let i = 0; i < this._columnCount; i++) {\n            this.tableHeader[i] = this._columns[i].table() + this.opts.nestTables + this._columns[i].name();\n          }\n          this.checkDuplicates();\n        } else if (this.opts.nestTables === true) {\n          this.parseRow = this.parseRowNested;\n          for (let i = 0; i < this._columnCount; i++) {\n            this.tableHeader[i] = [this._columns[i].table(), this._columns[i].name()];\n          }\n          this.checkNestTablesDuplicates();\n        }\n      } else {\n        for (let i = 0; i < this._columnCount; i++) {\n          this.tableHeader[i] = this._columns[i].name();\n        }\n        this.checkDuplicates();\n      }\n    }\n  }\n\n  checkDuplicates() {\n    if (this.opts.checkDuplicate) {\n      for (let i = 0; i < this._columnCount; i++) {\n        if (this.tableHeader.indexOf(this.tableHeader[i], i + 1) > 0) {\n          const dupes = this.tableHeader.reduce(\n            (acc, v, i, arr) => (arr.indexOf(v) !== i && acc.indexOf(v) === -1 ? acc.concat(v) : acc),\n            []\n          );\n          this.throwUnexpectedError(\n            `Error in results, duplicate field name \\`${dupes[0]}\\`.\\n(see option \\`checkDuplicate\\`)`,\n            false,\n            null,\n            '42000',\n            Errors.ER_DUPLICATE_FIELD\n          );\n        }\n      }\n    }\n  }\n\n  checkNestTablesDuplicates() {\n    if (this.opts.checkDuplicate) {\n      for (let i = 0; i < this._columnCount; i++) {\n        for (let j = 0; j < i; j++) {\n          if (this.tableHeader[j][0] === this.tableHeader[i][0] && this.tableHeader[j][1] === this.tableHeader[i][1]) {\n            this.throwUnexpectedError(\n              `Error in results, duplicate field name \\`${this.tableHeader[i][0]}\\`.\\`${this.tableHeader[i][1]}\\`\\n(see option \\`checkDuplicate\\`)`,\n              false,\n              null,\n              '42000',\n              Errors.ER_DUPLICATE_FIELD\n            );\n          }\n        }\n      }\n    }\n  }\n\n  /**\n   * Read intermediate EOF.\n   * _only for server before MariaDB 10.2 / MySQL 5.7 that doesn't have CLIENT_DEPRECATE_EOF capability_\n   * see https://mariadb.com/kb/en/library/eof_packet/\n   *\n   * @param packet    EOF Packet\n   * @param out       output writer\n   * @param opts      connection options\n   * @param info      connection information\n   * @returns {*}\n   */\n  readIntermediateEOF(packet, out, opts, info) {\n    if (packet.peek() !== 0xfe) {\n      return this.throwNewError('Error in protocol, expected EOF packet', true, info, '42000', Errors.ER_EOF_EXPECTED);\n    }\n\n    //before MySQL 5.7.5, last EOF doesn't contain the good flag SERVER_MORE_RESULTS_EXISTS\n    //for OUT parameters. It must be checked here\n    //(5.7.5 does have the CLIENT_DEPRECATE_EOF capability, so this packet in not even send)\n    packet.skip(3);\n    info.status = packet.readUInt16();\n    this.isOutParameter = info.status & ServerStatus.PS_OUT_PARAMS;\n    this.onPacketReceive = this.readResultSetRow;\n  }\n\n  handleNewRows(row) {\n    this._rows[this._responseIndex].push(row);\n  }\n\n  /**\n   * Check if packet is result-set end = EOF of OK_Packet with EOF header according to CLIENT_DEPRECATE_EOF capability\n   * or a result-set row\n   *\n   * @param packet    current packet\n   * @param out       output writer\n   * @param opts      connection options\n   * @param info      connection information\n   * @returns {*}\n   */\n  readResultSetRow(packet, out, opts, info) {\n    if (packet.peek() >= 0xfe) {\n      if (packet.peek() === 0xff) {\n        //force in transaction status, since query will have created a transaction if autocommit is off\n        //goal is to avoid unnecessary COMMIT/ROLLBACK.\n        info.status |= ServerStatus.STATUS_IN_TRANS;\n        return this.throwError(packet.readError(info, this.displaySql(), this.stack), info);\n      }\n\n      if ((!info.eofDeprecated && packet.length() < 13) || (info.eofDeprecated && packet.length() < 0xffffff)) {\n        if (!info.eofDeprecated) {\n          packet.skip(3);\n          info.status = packet.readUInt16();\n        } else {\n          packet.skip(1); //skip header\n          packet.skipLengthCodedNumber(); //skip update count\n          packet.skipLengthCodedNumber(); //skip insert id\n          info.status = packet.readUInt16();\n        }\n\n        if (this.opts.metaAsArray) {\n          //return promise object as array :\n          // example for SELECT 1 =>\n          // [\n          //   [ {\"1\": 1} ],      //rows\n          //   [ColumnDefinition] //meta\n          // ]\n\n          if (info.status & ServerStatus.MORE_RESULTS_EXISTS || this.isOutParameter) {\n            if (!this._meta) this._meta = [];\n            this._meta[this._responseIndex] = this._columns;\n            this._responseIndex++;\n            return (this.onPacketReceive = this.readResponsePacket);\n          }\n          if (this._responseIndex === 0) {\n            this.success([this._rows[0], this._columns]);\n          } else {\n            if (!this._meta) this._meta = [];\n            this._meta[this._responseIndex] = this._columns;\n            this.success([this._rows, this._meta]);\n          }\n        } else {\n          //return promise object as rows that have meta property :\n          // example for SELECT 1 =>\n          // [\n          //   {\"1\": 1},\n          //   meta: [ColumnDefinition]\n          // ]\n          Object.defineProperty(this._rows[this._responseIndex], 'meta', {\n            value: this._columns,\n            writable: true,\n            enumerable: this.opts.metaEnumerable\n          });\n\n          if (info.status & ServerStatus.MORE_RESULTS_EXISTS || this.isOutParameter) {\n            this._responseIndex++;\n            return (this.onPacketReceive = this.readResponsePacket);\n          }\n          this.success(this._responseIndex === 0 ? this._rows[0] : this._rows);\n        }\n\n        return;\n      }\n    }\n\n    this.handleNewRows(this.parseRow(packet));\n  }\n\n  /**\n   * Display current SQL with parameters (truncated if too big)\n   *\n   * @returns {string}\n   */\n  displaySql() {\n    if (this.opts && this.initialValues) {\n      if (this.sql.length > this.opts.debugLen) {\n        return this.sql.substring(0, this.opts.debugLen) + '...';\n      }\n\n      let sqlMsg = this.sql + ' - parameters:';\n      return this.logParameters(sqlMsg, this.initialValues);\n    }\n    return this.sql + ' - parameters:[]';\n  }\n\n  logParameters(sqlMsg, values) {\n    if (this.opts.namedPlaceholders) {\n      sqlMsg += '{';\n      let first = true;\n      for (let key in values) {\n        if (first) {\n          first = false;\n        } else {\n          sqlMsg += ',';\n        }\n        sqlMsg += \"'\" + key + \"':\";\n        let param = values[key];\n        sqlMsg = Parser.logParam(sqlMsg, param);\n        if (sqlMsg.length > this.opts.debugLen) {\n          sqlMsg = sqlMsg.substring(0, this.opts.debugLen) + '...';\n          break;\n        }\n      }\n      sqlMsg += '}';\n    } else {\n      sqlMsg += '[';\n      if (Array.isArray(values)) {\n        for (let i = 0; i < values.length; i++) {\n          if (i !== 0) sqlMsg += ',';\n          let param = values[i];\n          sqlMsg = Parser.logParam(sqlMsg, param);\n          if (sqlMsg.length > this.opts.debugLen) {\n            sqlMsg = sqlMsg.substring(0, this.opts.debugLen) + '...';\n            break;\n          }\n        }\n      } else {\n        sqlMsg = Parser.logParam(sqlMsg, values);\n        if (sqlMsg.length > this.opts.debugLen) {\n          sqlMsg = sqlMsg.substring(0, this.opts.debugLen) + '...';\n        }\n      }\n      sqlMsg += ']';\n    }\n    return sqlMsg;\n  }\n\n  parseRowAsArray(packet) {\n    const row = new Array(this._columnCount);\n    const nullBitMap = this.binary ? BinaryDecoder.newRow(packet, this._columns) : null;\n    for (let i = 0; i < this._columnCount; i++) {\n      row[i] = this._parseFonction[i](packet, this.opts, this.unexpectedError, nullBitMap, i);\n    }\n    return row;\n  }\n\n  parseRowNested(packet) {\n    const row = {};\n    const nullBitMap = this.binary ? BinaryDecoder.newRow(packet, this._columns) : null;\n    for (let i = 0; i < this._columnCount; i++) {\n      if (!row[this.tableHeader[i][0]]) row[this.tableHeader[i][0]] = {};\n      row[this.tableHeader[i][0]][this.tableHeader[i][1]] = this._parseFonction[i](\n        packet,\n        this.opts,\n        this.unexpectedError,\n        nullBitMap,\n        i\n      );\n    }\n    return row;\n  }\n\n  parseRowStdText(packet) {\n    const row = {};\n    for (let i = 0; i < this._columnCount; i++) {\n      row[this.tableHeader[i]] = this._parseFonction[i](packet, this.opts, this.unexpectedError);\n    }\n    return row;\n  }\n\n  parseRowStdBinary(packet) {\n    const nullBitMap = BinaryDecoder.newRow(packet, this._columns);\n    const row = {};\n    for (let i = 0; i < this._columnCount; i++) {\n      row[this.tableHeader[i]] = this._parseFonction[i](packet, this.opts, this.unexpectedError, nullBitMap, i);\n    }\n    return row;\n  }\n\n  readCastValue(column, packet, opts, unexpectedError, nullBitmap, index) {\n    if (this.binary) {\n      BinaryDecoder.castWrapper(column, packet, opts, nullBitmap, index);\n    } else {\n      TextDecoder.castWrapper(column, packet, opts, nullBitmap, index);\n    }\n    const dataParser = this.binary ? BinaryDecoder.parser : TextDecoder.parser;\n    return opts.typeCast(column, dataParser(column, opts).bind(null, packet, opts, unexpectedError, nullBitmap, index));\n  }\n\n  readLocalInfile(packet, out, opts, info) {\n    packet.skip(1); //skip header\n    out.startPacket(this);\n\n    const fileName = packet.readStringRemaining();\n\n    if (!Parse.validateFileName(this.sql, this.initialValues, fileName)) {\n      out.writeEmptyPacket();\n      const error = Errors.createError(\n        \"LOCAL INFILE wrong filename. '\" +\n          fileName +\n          \"' doesn't correspond to query \" +\n          this.sql +\n          '. Query cancelled. Check for malicious server / proxy',\n        Errors.ER_LOCAL_INFILE_WRONG_FILENAME,\n        info,\n        'HY000',\n        this.sql\n      );\n\n      process.nextTick(this.reject, error);\n      this.reject = null;\n      this.resolve = null;\n      return (this.onPacketReceive = this.readResponsePacket);\n    }\n\n    // this.sequenceNo = 2;\n    // this.compressSequenceNo = 2;\n    const stream = fs.createReadStream(fileName);\n    stream.on('error', (err) => {\n      out.writeEmptyPacket();\n      const error = Errors.createError(\n        `LOCAL INFILE command failed: ${err.message}`,\n        Errors.ER_LOCAL_INFILE_NOT_READABLE,\n        info,\n        '22000',\n        this.sql\n      );\n      process.nextTick(this.reject, error);\n      this.reject = null;\n      this.resolve = null;\n    });\n    stream.on('data', (chunk) => {\n      out.writeBuffer(chunk, 0, chunk.length);\n    });\n    stream.on('end', () => {\n      if (!out.isEmpty()) {\n        out.flushBuffer(false);\n      }\n      out.writeEmptyPacket();\n    });\n    this.onPacketReceive = this.readResponsePacket;\n  }\n\n  static logParam(sqlMsg, param) {\n    if (param === undefined || param === null) {\n      sqlMsg += param === undefined ? 'undefined' : 'null';\n    } else {\n      switch (param.constructor.name) {\n        case 'Buffer':\n          sqlMsg += '0x' + param.toString('hex', 0, Math.min(1024, param.length)) + '';\n          break;\n\n        case 'String':\n          sqlMsg += \"'\" + param + \"'\";\n          break;\n\n        case 'Date':\n          sqlMsg += getStringDate(param);\n          break;\n\n        case 'Object':\n          sqlMsg += JSON.stringify(param);\n          break;\n\n        default:\n          sqlMsg += param.toString();\n      }\n    }\n    return sqlMsg;\n  }\n}\n\nfunction getStringDate(param) {\n  return (\n    \"'\" +\n    ('00' + (param.getMonth() + 1)).slice(-2) +\n    '/' +\n    ('00' + param.getDate()).slice(-2) +\n    '/' +\n    param.getFullYear() +\n    ' ' +\n    ('00' + param.getHours()).slice(-2) +\n    ':' +\n    ('00' + param.getMinutes()).slice(-2) +\n    ':' +\n    ('00' + param.getSeconds()).slice(-2) +\n    '.' +\n    ('000' + param.getMilliseconds()).slice(-3) +\n    \"'\"\n  );\n}\n\nmodule.exports = Parser;\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}