{"ast":null,"code":"'use strict';\n\nconst Stream = require('./cmd/stream');\nconst CommandParameter = require('./command-parameter');\n\n/**\n * New Connection instance.\n *\n * @param options    connection options\n * @returns Connection instance\n * @constructor\n * @fires Connection#connect\n * @fires Connection#end\n * @fires Connection#error\n *\n */\nclass ConnectionPromise {\n  #conn;\n  constructor(conn) {\n    this.#conn = conn;\n    this.on = this.#conn.on.bind(this.#conn);\n    this.once = this.#conn.once.bind(this.#conn);\n  }\n  get threadId() {\n    return this.#conn.threadId;\n  }\n  get info() {\n    return this.#conn.info;\n  }\n  get prepareCache() {\n    return this.#conn.prepareCache;\n  }\n\n  /**\n   * Permit to change user during connection.\n   * All user variables will be reset, Prepare commands will be released.\n   * !!! mysql has a bug when CONNECT_ATTRS capability is set, that is default !!!!\n   *\n   * @param options   connection options\n   * @returns {Promise} promise\n   */\n  changeUser(options) {\n    const cmdParam = new CommandParameter(null, null, options);\n    if (this.#conn.opts.trace) Error.captureStackTrace(cmdParam);\n    return new Promise(this.#conn.changeUser.bind(this.#conn, cmdParam));\n  }\n\n  /**\n   * Start transaction\n   *\n   * @returns {Promise} promise\n   */\n  beginTransaction() {\n    return this.query('START TRANSACTION');\n  }\n\n  /**\n   * Commit a transaction.\n   *\n   * @returns {Promise} command if commit was needed only\n   */\n  commit() {\n    const cmdParam = ConnectionPromise._PARAM(this.#conn.opts, 'COMMIT');\n    return new Promise(this.#conn.changeTransaction.bind(this.#conn, cmdParam));\n  }\n\n  /**\n   * Roll back a transaction.\n   *\n   * @returns {Promise} promise\n   */\n  rollback() {\n    const cmdParam = ConnectionPromise._PARAM(this.#conn.opts, 'ROLLBACK');\n    return new Promise(this.#conn.changeTransaction.bind(this.#conn, cmdParam));\n  }\n\n  /**\n   * Execute query using text protocol.\n   *\n   * @param sql     sql parameter Object can be used to supersede default option.\n   *                Object must then have sql property.\n   * @param values  object / array of placeholder values (not mandatory)\n   * @returns {Promise} promise\n   */\n  query(sql, values) {\n    const cmdParam = ConnectionPromise._PARAM(this.#conn.opts, sql, values);\n    return new Promise(this.#conn.query.bind(this.#conn, cmdParam));\n  }\n  static _PARAM(options, sql, values) {\n    let _cmdOpt,\n      _sql = sql,\n      _values = values;\n    if (typeof sql === 'object') {\n      _cmdOpt = sql;\n      _sql = _cmdOpt.sql;\n      if (_cmdOpt.values) _values = _cmdOpt.values;\n    }\n    const cmdParam = new CommandParameter(_sql, _values, _cmdOpt);\n    if (options.trace) Error.captureStackTrace(cmdParam);\n    return cmdParam;\n  }\n  execute(sql, values) {\n    const cmdParam = ConnectionPromise._PARAM(this.#conn.opts, sql, values);\n    return ConnectionPromise._EXECUTE_CMD(this.#conn, cmdParam);\n  }\n  static _EXECUTE_CMD(conn, cmdParam) {\n    return new Promise(conn.prepare.bind(conn, cmdParam)).then(prepare => {\n      return prepare.execute(cmdParam.values, cmdParam.opts, null, cmdParam.stack).finally(() => prepare.close());\n    }).catch(err => {\n      if (conn.opts.logger.error) conn.opts.logger.error(err);\n      throw err;\n    });\n  }\n  prepare(sql) {\n    let _cmdOpt, _sql;\n    if (typeof sql === 'object') {\n      _cmdOpt = sql;\n      _sql = _cmdOpt.sql;\n    } else {\n      _sql = sql;\n    }\n    const cmdParam = new CommandParameter(_sql, null, _cmdOpt);\n    if (this.#conn.opts.trace) Error.captureStackTrace(cmdParam);\n    return new Promise(this.#conn.prepare.bind(this.#conn, cmdParam));\n  }\n\n  /**\n   * Execute batch using text protocol.\n   *\n   * @param sql     sql parameter Object can be used to supersede default option.\n   *                Object must then have sql property.\n   * @param values  object / array of placeholder values\n   * @returns {Promise} promise\n   */\n  batch(sql, values) {\n    const cmdParam = ConnectionPromise._PARAM(this.#conn.opts, sql, values);\n    return this.#conn.batch(cmdParam);\n  }\n  static _BATCH_CMD(conn, cmdParam) {\n    return conn.batch(cmdParam);\n  }\n\n  /**\n   * Execute query returning a Readable Object that will emit columns/data/end/error events\n   * to permit streaming big result-set\n   *\n   * @param sql     sql parameter Object can be used to supersede default option.\n   *                Object must then have sql property.\n   * @param values  object / array of placeholder values (not mandatory)\n   * @returns {Readable}\n   */\n  queryStream(sql, values) {\n    const cmdParam = ConnectionPromise._PARAM(this.#conn.opts, sql, values);\n    const cmd = new Stream(cmdParam, this.#conn.opts, this.#conn.socket);\n    if (this.#conn.opts.logger.error) cmd.on('error', this.#conn.opts.logger.error);\n    this.#conn.addCommand(cmd);\n    return cmd.inStream;\n  }\n\n  /**\n   * Send an empty MySQL packet to ensure connection is active, and reset @@wait_timeout\n   * @param timeout (optional) timeout value in ms. If reached, throw error and close connection\n   * @returns {Promise} promise\n   */\n  ping(timeout) {\n    const cmdParam = new CommandParameter(null, null, {\n      timeout: timeout\n    });\n    if (this.#conn.opts.trace) Error.captureStackTrace(cmdParam);\n    return new Promise(this.#conn.ping.bind(this.#conn, cmdParam));\n  }\n\n  /**\n   * Send a reset command that will\n   * - rollback any open transaction\n   * - reset transaction isolation level\n   * - reset session variables\n   * - delete user variables\n   * - remove temporary tables\n   * - remove all PREPARE statement\n   *\n   * @returns {Promise} promise\n   */\n  reset() {\n    const cmdParam = new CommandParameter();\n    if (this.#conn.opts.trace) Error.captureStackTrace(cmdParam);\n    return new Promise(this.#conn.reset.bind(this.#conn, cmdParam));\n  }\n\n  /**\n   * Indicates the state of the connection as the driver knows it\n   * @returns {boolean}\n   */\n  isValid() {\n    return this.#conn.isValid();\n  }\n\n  /**\n   * Terminate connection gracefully.\n   *\n   * @returns {Promise} promise\n   */\n  end() {\n    const cmdParam = new CommandParameter();\n    if (this.#conn.opts.trace) Error.captureStackTrace(cmdParam);\n    return new Promise(this.#conn.end.bind(this.#conn, cmdParam));\n  }\n\n  /**\n   * Alias for destroy.\n   */\n  close() {\n    this.destroy();\n  }\n\n  /**\n   * Force connection termination by closing the underlying socket and killing server process if any.\n   */\n  destroy() {\n    this.#conn.destroy();\n  }\n  pause() {\n    this.#conn.pause();\n  }\n  resume() {\n    this.#conn.resume();\n  }\n  format(sql, values) {\n    this.#conn.format(sql, values);\n  }\n\n  /**\n   * return current connected server version information.\n   *\n   * @returns {*}\n   */\n  serverVersion() {\n    return this.#conn.serverVersion();\n  }\n\n  /**\n   * Change option \"debug\" during connection.\n   * @param val   debug value\n   */\n  debug(val) {\n    return this.#conn.debug(val);\n  }\n  debugCompress(val) {\n    return this.#conn.debugCompress(val);\n  }\n  escape(val) {\n    return this.#conn.escape(val);\n  }\n  escapeId(val) {\n    return this.#conn.escapeId(val);\n  }\n\n  //*****************************************************************\n  // internal public testing methods\n  //*****************************************************************\n\n  get __tests() {\n    return this.#conn.__tests;\n  }\n}\nmodule.exports = ConnectionPromise;","map":{"version":3,"names":["Stream","require","CommandParameter","ConnectionPromise","conn","constructor","on","bind","once","threadId","info","prepareCache","changeUser","options","cmdParam","opts","trace","Error","captureStackTrace","Promise","beginTransaction","query","commit","_PARAM","changeTransaction","rollback","sql","values","_cmdOpt","_sql","_values","execute","_EXECUTE_CMD","prepare","then","stack","finally","close","catch","err","logger","error","batch","_BATCH_CMD","queryStream","cmd","socket","addCommand","inStream","ping","timeout","reset","isValid","end","destroy","pause","resume","format","serverVersion","debug","val","debugCompress","escape","escapeId","__tests","module","exports"],"sources":["/home/warameur/Documents/velocity-data-viz/node_modules/mariadb/lib/connection-promise.js"],"sourcesContent":["'use strict';\n\nconst Stream = require('./cmd/stream');\nconst CommandParameter = require('./command-parameter');\n\n/**\n * New Connection instance.\n *\n * @param options    connection options\n * @returns Connection instance\n * @constructor\n * @fires Connection#connect\n * @fires Connection#end\n * @fires Connection#error\n *\n */\nclass ConnectionPromise {\n  #conn;\n\n  constructor(conn) {\n    this.#conn = conn;\n    this.on = this.#conn.on.bind(this.#conn);\n    this.once = this.#conn.once.bind(this.#conn);\n  }\n\n  get threadId() {\n    return this.#conn.threadId;\n  }\n\n  get info() {\n    return this.#conn.info;\n  }\n\n  get prepareCache() {\n    return this.#conn.prepareCache;\n  }\n\n  /**\n   * Permit to change user during connection.\n   * All user variables will be reset, Prepare commands will be released.\n   * !!! mysql has a bug when CONNECT_ATTRS capability is set, that is default !!!!\n   *\n   * @param options   connection options\n   * @returns {Promise} promise\n   */\n  changeUser(options) {\n    const cmdParam = new CommandParameter(null, null, options);\n    if (this.#conn.opts.trace) Error.captureStackTrace(cmdParam);\n    return new Promise(this.#conn.changeUser.bind(this.#conn, cmdParam));\n  }\n\n  /**\n   * Start transaction\n   *\n   * @returns {Promise} promise\n   */\n  beginTransaction() {\n    return this.query('START TRANSACTION');\n  }\n\n  /**\n   * Commit a transaction.\n   *\n   * @returns {Promise} command if commit was needed only\n   */\n  commit() {\n    const cmdParam = ConnectionPromise._PARAM(this.#conn.opts, 'COMMIT');\n    return new Promise(this.#conn.changeTransaction.bind(this.#conn, cmdParam));\n  }\n\n  /**\n   * Roll back a transaction.\n   *\n   * @returns {Promise} promise\n   */\n  rollback() {\n    const cmdParam = ConnectionPromise._PARAM(this.#conn.opts, 'ROLLBACK');\n    return new Promise(this.#conn.changeTransaction.bind(this.#conn, cmdParam));\n  }\n\n  /**\n   * Execute query using text protocol.\n   *\n   * @param sql     sql parameter Object can be used to supersede default option.\n   *                Object must then have sql property.\n   * @param values  object / array of placeholder values (not mandatory)\n   * @returns {Promise} promise\n   */\n  query(sql, values) {\n    const cmdParam = ConnectionPromise._PARAM(this.#conn.opts, sql, values);\n    return new Promise(this.#conn.query.bind(this.#conn, cmdParam));\n  }\n\n  static _PARAM(options, sql, values) {\n    let _cmdOpt,\n      _sql = sql,\n      _values = values;\n    if (typeof sql === 'object') {\n      _cmdOpt = sql;\n      _sql = _cmdOpt.sql;\n      if (_cmdOpt.values) _values = _cmdOpt.values;\n    }\n    const cmdParam = new CommandParameter(_sql, _values, _cmdOpt);\n    if (options.trace) Error.captureStackTrace(cmdParam);\n    return cmdParam;\n  }\n\n  execute(sql, values) {\n    const cmdParam = ConnectionPromise._PARAM(this.#conn.opts, sql, values);\n    return ConnectionPromise._EXECUTE_CMD(this.#conn, cmdParam);\n  }\n\n  static _EXECUTE_CMD(conn, cmdParam) {\n    return new Promise(conn.prepare.bind(conn, cmdParam))\n      .then((prepare) => {\n        return prepare.execute(cmdParam.values, cmdParam.opts, null, cmdParam.stack).finally(() => prepare.close());\n      })\n      .catch((err) => {\n        if (conn.opts.logger.error) conn.opts.logger.error(err);\n        throw err;\n      });\n  }\n\n  prepare(sql) {\n    let _cmdOpt, _sql;\n    if (typeof sql === 'object') {\n      _cmdOpt = sql;\n      _sql = _cmdOpt.sql;\n    } else {\n      _sql = sql;\n    }\n    const cmdParam = new CommandParameter(_sql, null, _cmdOpt);\n    if (this.#conn.opts.trace) Error.captureStackTrace(cmdParam);\n    return new Promise(this.#conn.prepare.bind(this.#conn, cmdParam));\n  }\n\n  /**\n   * Execute batch using text protocol.\n   *\n   * @param sql     sql parameter Object can be used to supersede default option.\n   *                Object must then have sql property.\n   * @param values  object / array of placeholder values\n   * @returns {Promise} promise\n   */\n  batch(sql, values) {\n    const cmdParam = ConnectionPromise._PARAM(this.#conn.opts, sql, values);\n    return this.#conn.batch(cmdParam);\n  }\n\n  static _BATCH_CMD(conn, cmdParam) {\n    return conn.batch(cmdParam);\n  }\n\n  /**\n   * Execute query returning a Readable Object that will emit columns/data/end/error events\n   * to permit streaming big result-set\n   *\n   * @param sql     sql parameter Object can be used to supersede default option.\n   *                Object must then have sql property.\n   * @param values  object / array of placeholder values (not mandatory)\n   * @returns {Readable}\n   */\n  queryStream(sql, values) {\n    const cmdParam = ConnectionPromise._PARAM(this.#conn.opts, sql, values);\n    const cmd = new Stream(cmdParam, this.#conn.opts, this.#conn.socket);\n    if (this.#conn.opts.logger.error) cmd.on('error', this.#conn.opts.logger.error);\n    this.#conn.addCommand(cmd);\n    return cmd.inStream;\n  }\n\n  /**\n   * Send an empty MySQL packet to ensure connection is active, and reset @@wait_timeout\n   * @param timeout (optional) timeout value in ms. If reached, throw error and close connection\n   * @returns {Promise} promise\n   */\n  ping(timeout) {\n    const cmdParam = new CommandParameter(null, null, { timeout: timeout });\n    if (this.#conn.opts.trace) Error.captureStackTrace(cmdParam);\n    return new Promise(this.#conn.ping.bind(this.#conn, cmdParam));\n  }\n\n  /**\n   * Send a reset command that will\n   * - rollback any open transaction\n   * - reset transaction isolation level\n   * - reset session variables\n   * - delete user variables\n   * - remove temporary tables\n   * - remove all PREPARE statement\n   *\n   * @returns {Promise} promise\n   */\n  reset() {\n    const cmdParam = new CommandParameter();\n    if (this.#conn.opts.trace) Error.captureStackTrace(cmdParam);\n    return new Promise(this.#conn.reset.bind(this.#conn, cmdParam));\n  }\n\n  /**\n   * Indicates the state of the connection as the driver knows it\n   * @returns {boolean}\n   */\n  isValid() {\n    return this.#conn.isValid();\n  }\n\n  /**\n   * Terminate connection gracefully.\n   *\n   * @returns {Promise} promise\n   */\n  end() {\n    const cmdParam = new CommandParameter();\n    if (this.#conn.opts.trace) Error.captureStackTrace(cmdParam);\n    return new Promise(this.#conn.end.bind(this.#conn, cmdParam));\n  }\n\n  /**\n   * Alias for destroy.\n   */\n  close() {\n    this.destroy();\n  }\n\n  /**\n   * Force connection termination by closing the underlying socket and killing server process if any.\n   */\n  destroy() {\n    this.#conn.destroy();\n  }\n\n  pause() {\n    this.#conn.pause();\n  }\n\n  resume() {\n    this.#conn.resume();\n  }\n\n  format(sql, values) {\n    this.#conn.format(sql, values);\n  }\n\n  /**\n   * return current connected server version information.\n   *\n   * @returns {*}\n   */\n  serverVersion() {\n    return this.#conn.serverVersion();\n  }\n\n  /**\n   * Change option \"debug\" during connection.\n   * @param val   debug value\n   */\n  debug(val) {\n    return this.#conn.debug(val);\n  }\n\n  debugCompress(val) {\n    return this.#conn.debugCompress(val);\n  }\n\n  escape(val) {\n    return this.#conn.escape(val);\n  }\n\n  escapeId(val) {\n    return this.#conn.escapeId(val);\n  }\n\n  //*****************************************************************\n  // internal public testing methods\n  //*****************************************************************\n\n  get __tests() {\n    return this.#conn.__tests;\n  }\n}\n\nmodule.exports = ConnectionPromise;\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}